// generated by micro_dart_generator
// ignore_for_file: non_constant_identifier_names

import 'package:micro_dart_runtime/micro_dart_runtime.dart' as m;
import 'dart:io';
import 'dart:async';
import 'dart:collection'
    show HashMap, HashSet, Queue, ListQueue, MapBase, UnmodifiableMapView;
import 'dart:convert';
import 'dart:developer' hide log;
import 'dart:isolate';
import 'dart:math';
import 'dart:typed_data';

const libraryMirror = m.LibraryMirror(
  'dart:io',
  {
    'OSError.noErrorCode': _OSError_noErrorCode$,
    'OSError.': _OSError__$,
    'zlib': _zlib$,
    'gzip': _gzip$,
    'ZLibOption.minWindowBits': _ZLibOption_minWindowBits$,
    'ZLibOption.maxWindowBits': _ZLibOption_maxWindowBits$,
    'ZLibOption.defaultWindowBits': _ZLibOption_defaultWindowBits$,
    'ZLibOption.minLevel': _ZLibOption_minLevel$,
    'ZLibOption.maxLevel': _ZLibOption_maxLevel$,
    'ZLibOption.defaultLevel': _ZLibOption_defaultLevel$,
    'ZLibOption.minMemLevel': _ZLibOption_minMemLevel$,
    'ZLibOption.maxMemLevel': _ZLibOption_maxMemLevel$,
    'ZLibOption.defaultMemLevel': _ZLibOption_defaultMemLevel$,
    'ZLibOption.strategyFiltered': _ZLibOption_strategyFiltered$,
    'ZLibOption.strategyHuffmanOnly': _ZLibOption_strategyHuffmanOnly$,
    'ZLibOption.strategyRle': _ZLibOption_strategyRle$,
    'ZLibOption.strategyFixed': _ZLibOption_strategyFixed$,
    'ZLibOption.strategyDefault': _ZLibOption_strategyDefault$,
    'ZLibCodec.': _ZLibCodec__$,
    'GZipCodec.': _GZipCodec__$,
    'ZLibEncoder.': _ZLibEncoder__$,
    'ZLibDecoder.': _ZLibDecoder__$,
    'RawZLibFilter.deflateFilter': _RawZLibFilter_deflateFilter_$,
    'RawZLibFilter.inflateFilter': _RawZLibFilter_inflateFilter_$,
    'Directory.current': _Directory_current$,
    'Directory.systemTemp': _Directory_systemTemp$,
    'Directory.': _Directory__$,
    'Directory.fromRawPath': _Directory_fromRawPath_$,
    'Directory.fromUri': _Directory_fromUri_$,
    'FileMode.read': _FileMode_read$,
    'FileMode.write': _FileMode_write$,
    'FileMode.append': _FileMode_append$,
    'FileMode.writeOnly': _FileMode_writeOnly$,
    'FileMode.writeOnlyAppend': _FileMode_writeOnlyAppend$,
    'FileLock.shared': _FileLock_shared$,
    'FileLock.exclusive': _FileLock_exclusive$,
    'FileLock.blockingShared': _FileLock_blockingShared$,
    'FileLock.blockingExclusive': _FileLock_blockingExclusive$,
    'File.': _File__$,
    'File.fromUri': _File_fromUri_$,
    'File.fromRawPath': _File_fromRawPath_$,
    'FileSystemException.': _FileSystemException__$,
    'PathAccessException.': _PathAccessException__$,
    'PathExistsException.': _PathExistsException__$,
    'PathNotFoundException.': _PathNotFoundException__$,
    'Pipe.createSync': _Pipe_createSync_$,
    'Pipe.create': _Pipe_create$,
    'FileSystemEntityType.file': _FileSystemEntityType_file$,
    'FileSystemEntityType.directory': _FileSystemEntityType_directory$,
    'FileSystemEntityType.link': _FileSystemEntityType_link$,
    'FileSystemEntityType.unixDomainSock':
        _FileSystemEntityType_unixDomainSock$,
    'FileSystemEntityType.pipe': _FileSystemEntityType_pipe$,
    'FileSystemEntityType.notFound': _FileSystemEntityType_notFound$,
    'FileSystemEntityType.NOT_FOUND': _FileSystemEntityType_NOT_FOUND$,
    'FileStat.statSync': _FileStat_statSync$,
    'FileStat.stat': _FileStat_stat$,
    'FileSystemEntity.isWatchSupported': _FileSystemEntity_isWatchSupported$,
    'FileSystemEntity.identical': _FileSystemEntity_identical$,
    'FileSystemEntity.identicalSync': _FileSystemEntity_identicalSync$,
    'FileSystemEntity.type': _FileSystemEntity_type$,
    'FileSystemEntity.typeSync': _FileSystemEntity_typeSync$,
    'FileSystemEntity.isLink': _FileSystemEntity_isLink$,
    'FileSystemEntity.isFile': _FileSystemEntity_isFile$,
    'FileSystemEntity.isDirectory': _FileSystemEntity_isDirectory$,
    'FileSystemEntity.isLinkSync': _FileSystemEntity_isLinkSync$,
    'FileSystemEntity.isFileSync': _FileSystemEntity_isFileSync$,
    'FileSystemEntity.isDirectorySync': _FileSystemEntity_isDirectorySync$,
    'FileSystemEntity.parentOf': _FileSystemEntity_parentOf$,
    'FileSystemEvent.create': _FileSystemEvent_create$,
    'FileSystemEvent.modify': _FileSystemEvent_modify$,
    'FileSystemEvent.delete': _FileSystemEvent_delete$,
    'FileSystemEvent.move': _FileSystemEvent_move$,
    'FileSystemEvent.all': _FileSystemEvent_all$,
    'FileSystemCreateEvent.': _FileSystemCreateEvent__$,
    'FileSystemModifyEvent.': _FileSystemModifyEvent__$,
    'FileSystemDeleteEvent.': _FileSystemDeleteEvent__$,
    'FileSystemMoveEvent.': _FileSystemMoveEvent__$,
    'IOSink.': _IOSink__$,
    'Link.': _Link__$,
    'Link.fromRawPath': _Link_fromRawPath_$,
    'Link.fromUri': _Link_fromUri_$,
    'IOOverrides.current': _IOOverrides_current$,
    'Platform.isLinux': _Platform_isLinux$,
    'Platform.isMacOS': _Platform_isMacOS$,
    'Platform.isWindows': _Platform_isWindows$,
    'Platform.isAndroid': _Platform_isAndroid$,
    'Platform.isIOS': _Platform_isIOS$,
    'Platform.isFuchsia': _Platform_isFuchsia$,
    'Platform.numberOfProcessors': _Platform_numberOfProcessors$,
    'Platform.pathSeparator': _Platform_pathSeparator$,
    'Platform.localeName': _Platform_localeName$,
    'Platform.operatingSystem': _Platform_operatingSystem$,
    'Platform.operatingSystemVersion': _Platform_operatingSystemVersion$,
    'Platform.localHostname': _Platform_localHostname$,
    'Platform.environment': _Platform_environment$,
    'Platform.executable': _Platform_executable$,
    'Platform.resolvedExecutable': _Platform_resolvedExecutable$,
    'Platform.script': _Platform_script$,
    'Platform.executableArguments': _Platform_executableArguments$,
    'Platform.packageConfig': _Platform_packageConfig$,
    'Platform.version': _Platform_version$,
    'Platform.': _Platform__$,
    'exitCode': _exitCode$,
    'pid': _pid$,
    'ProcessInfo.currentRss': _ProcessInfo_currentRss$,
    'ProcessInfo.maxRss': _ProcessInfo_maxRss$,
    'ProcessStartMode.normal': _ProcessStartMode_normal$,
    'ProcessStartMode.inheritStdio': _ProcessStartMode_inheritStdio$,
    'ProcessStartMode.detached': _ProcessStartMode_detached$,
    'ProcessStartMode.detachedWithStdio': _ProcessStartMode_detachedWithStdio$,
    'ProcessStartMode.values': _ProcessStartMode_values$,
    'Process.start': _Process_start$,
    'Process.run': _Process_run$,
    'Process.runSync': _Process_runSync$,
    'Process.killPid': _Process_killPid$,
    'ProcessResult.': _ProcessResult__$,
    'ProcessSignal.sighup': _ProcessSignal_sighup$,
    'ProcessSignal.sigint': _ProcessSignal_sigint$,
    'ProcessSignal.sigquit': _ProcessSignal_sigquit$,
    'ProcessSignal.sigill': _ProcessSignal_sigill$,
    'ProcessSignal.sigtrap': _ProcessSignal_sigtrap$,
    'ProcessSignal.sigabrt': _ProcessSignal_sigabrt$,
    'ProcessSignal.sigbus': _ProcessSignal_sigbus$,
    'ProcessSignal.sigfpe': _ProcessSignal_sigfpe$,
    'ProcessSignal.sigkill': _ProcessSignal_sigkill$,
    'ProcessSignal.sigusr1': _ProcessSignal_sigusr1$,
    'ProcessSignal.sigsegv': _ProcessSignal_sigsegv$,
    'ProcessSignal.sigusr2': _ProcessSignal_sigusr2$,
    'ProcessSignal.sigpipe': _ProcessSignal_sigpipe$,
    'ProcessSignal.sigalrm': _ProcessSignal_sigalrm$,
    'ProcessSignal.sigterm': _ProcessSignal_sigterm$,
    'ProcessSignal.sigchld': _ProcessSignal_sigchld$,
    'ProcessSignal.sigcont': _ProcessSignal_sigcont$,
    'ProcessSignal.sigstop': _ProcessSignal_sigstop$,
    'ProcessSignal.sigtstp': _ProcessSignal_sigtstp$,
    'ProcessSignal.sigttin': _ProcessSignal_sigttin$,
    'ProcessSignal.sigttou': _ProcessSignal_sigttou$,
    'ProcessSignal.sigurg': _ProcessSignal_sigurg$,
    'ProcessSignal.sigxcpu': _ProcessSignal_sigxcpu$,
    'ProcessSignal.sigxfsz': _ProcessSignal_sigxfsz$,
    'ProcessSignal.sigvtalrm': _ProcessSignal_sigvtalrm$,
    'ProcessSignal.sigprof': _ProcessSignal_sigprof$,
    'ProcessSignal.sigwinch': _ProcessSignal_sigwinch$,
    'ProcessSignal.sigpoll': _ProcessSignal_sigpoll$,
    'ProcessSignal.sigsys': _ProcessSignal_sigsys$,
    'SignalException.': _SignalException__$,
    'ProcessException.': _ProcessException__$,
    'exit': _exit$,
    'sleep': _sleep$,
    'SecureServerSocket.bind': _SecureServerSocket_bind$,
    'RawSecureServerSocket.bind': _RawSecureServerSocket_bind$,
    'SecureSocket.secureServer': _SecureSocket_secureServer$,
    'RawSecureSocket.secureServer': _RawSecureSocket_secureServer$,
    'TlsException.': _TlsException__$,
    'HandshakeException.': _HandshakeException__$,
    'CertificateException.': _CertificateException__$,
    'SecurityContext.defaultContext': _SecurityContext_defaultContext$,
    'SecurityContext.': _SecurityContext__$,
    'InternetAddressType.IPv4': _InternetAddressType_IPv4$,
    'InternetAddressType.IPv6': _InternetAddressType_IPv6$,
    'InternetAddressType.unix': _InternetAddressType_unix$,
    'InternetAddressType.any': _InternetAddressType_any$,
    'InternetAddress.loopbackIPv4': _InternetAddress_loopbackIPv4$,
    'InternetAddress.loopbackIPv6': _InternetAddress_loopbackIPv6$,
    'InternetAddress.anyIPv4': _InternetAddress_anyIPv4$,
    'InternetAddress.anyIPv6': _InternetAddress_anyIPv6$,
    'InternetAddress.': _InternetAddress__$,
    'InternetAddress.fromRawAddress': _InternetAddress_fromRawAddress_$,
    'InternetAddress.lookup': _InternetAddress_lookup$,
    'InternetAddress.tryParse': _InternetAddress_tryParse$,
    'NetworkInterface.list': _NetworkInterface_list$,
    'RawServerSocket.bind': _RawServerSocket_bind$,
    'ServerSocket.bind': _ServerSocket_bind$,
    'SocketDirection.receive': _SocketDirection_receive$,
    'SocketDirection.send': _SocketDirection_send$,
    'SocketDirection.both': _SocketDirection_both$,
    'SocketOption.tcpNoDelay': _SocketOption_tcpNoDelay$,
    'RawSocketOption.levelSocket': _RawSocketOption_levelSocket$,
    'RawSocketOption.levelIPv4': _RawSocketOption_levelIPv4$,
    'RawSocketOption.IPv4MulticastInterface':
        _RawSocketOption_IPv4MulticastInterface$,
    'RawSocketOption.levelIPv6': _RawSocketOption_levelIPv6$,
    'RawSocketOption.IPv6MulticastInterface':
        _RawSocketOption_IPv6MulticastInterface$,
    'RawSocketOption.levelTcp': _RawSocketOption_levelTcp$,
    'RawSocketOption.levelUdp': _RawSocketOption_levelUdp$,
    'RawSocketOption.': _RawSocketOption__$,
    'RawSocketOption.fromInt': _RawSocketOption_fromInt_$,
    'RawSocketOption.fromBool': _RawSocketOption_fromBool_$,
    'RawSocketEvent.read': _RawSocketEvent_read$,
    'RawSocketEvent.write': _RawSocketEvent_write$,
    'RawSocketEvent.readClosed': _RawSocketEvent_readClosed$,
    'RawSocketEvent.closed': _RawSocketEvent_closed$,
    'RawSocket.connect': _RawSocket_connect$,
    'RawSocket.startConnect': _RawSocket_startConnect$,
    'Socket.connect': _Socket_connect$,
    'Socket.startConnect': _Socket_startConnect$,
    'Datagram.': _Datagram__$,
    'ResourceHandle.fromFile': _ResourceHandle_fromFile_$,
    'ResourceHandle.fromSocket': _ResourceHandle_fromSocket_$,
    'ResourceHandle.fromRawSocket': _ResourceHandle_fromRawSocket_$,
    'ResourceHandle.fromRawDatagramSocket':
        _ResourceHandle_fromRawDatagramSocket_$,
    'ResourceHandle.fromStdin': _ResourceHandle_fromStdin_$,
    'ResourceHandle.fromStdout': _ResourceHandle_fromStdout_$,
    'ResourceHandle.fromReadPipe': _ResourceHandle_fromReadPipe_$,
    'ResourceHandle.fromWritePipe': _ResourceHandle_fromWritePipe_$,
    'SocketControlMessage.fromHandles': _SocketControlMessage_fromHandles_$,
    'SocketMessage.': _SocketMessage__$,
    'RawDatagramSocket.bind': _RawDatagramSocket_bind$,
    'SocketException.': _SocketException__$,
    'SocketException.closed': _SocketException_closed_$,
    'stdin': _stdin$,
    'stdout': _stdout$,
    'stderr': _stderr$,
    'StdoutException.': _StdoutException__$,
    'StdinException.': _StdinException__$,
    'StdioType.terminal': _StdioType_terminal$,
    'StdioType.pipe': _StdioType_pipe$,
    'StdioType.file': _StdioType_file$,
    'StdioType.other': _StdioType_other$,
    'stdioType': _stdioType$,
    'systemEncoding': _systemEncoding$,
    'SystemEncoding.': _SystemEncoding__$,
    'RawSynchronousSocket.connectSync': _RawSynchronousSocket_connectSync$,
  },
  {
    'Directory.current': _Directory_current_set$,
    'IOOverrides.global': _IOOverrides_global_set$,
    'exitCode': _exitCode_set$,
  },
  {
    'IOException': m.ClassMirror(
      'IOException',
      {
        '#as': IOException_as$,
        '#is': IOException_is$,
        'toString': _IOException_toString$,
      },
      {},
    ),
    'OSError': m.ClassMirror(
      'OSError',
      {
        '#as': OSError_as$,
        '#is': OSError_is$,
        'message': _OSError_message$,
        'errorCode': _OSError_errorCode$,
        'toString': _OSError_toString$,
      },
      {},
    ),
    'ZLibOption': m.ClassMirror(
      'ZLibOption',
      {
        '#as': ZLibOption_as$,
        '#is': ZLibOption_is$,
      },
      {},
    ),
    'ZLibCodec': m.ClassMirror(
      'ZLibCodec',
      {
        '#as': ZLibCodec_as$,
        '#is': ZLibCodec_is$,
        'gzip': _ZLibCodec_gzip$,
        'level': _ZLibCodec_level$,
        'memLevel': _ZLibCodec_memLevel$,
        'strategy': _ZLibCodec_strategy$,
        'windowBits': _ZLibCodec_windowBits$,
        'raw': _ZLibCodec_raw$,
        'dictionary': _ZLibCodec_dictionary$,
        'encoder': _ZLibCodec_encoder$,
        'decoder': _ZLibCodec_decoder$,
      },
      {},
    ),
    'GZipCodec': m.ClassMirror(
      'GZipCodec',
      {
        '#as': GZipCodec_as$,
        '#is': GZipCodec_is$,
        'gzip': _GZipCodec_gzip$,
        'level': _GZipCodec_level$,
        'memLevel': _GZipCodec_memLevel$,
        'strategy': _GZipCodec_strategy$,
        'windowBits': _GZipCodec_windowBits$,
        'dictionary': _GZipCodec_dictionary$,
        'raw': _GZipCodec_raw$,
        'encoder': _GZipCodec_encoder$,
        'decoder': _GZipCodec_decoder$,
      },
      {},
    ),
    'ZLibEncoder': m.ClassMirror(
      'ZLibEncoder',
      {
        '#as': ZLibEncoder_as$,
        '#is': ZLibEncoder_is$,
        'gzip': _ZLibEncoder_gzip$,
        'level': _ZLibEncoder_level$,
        'memLevel': _ZLibEncoder_memLevel$,
        'strategy': _ZLibEncoder_strategy$,
        'windowBits': _ZLibEncoder_windowBits$,
        'dictionary': _ZLibEncoder_dictionary$,
        'raw': _ZLibEncoder_raw$,
        'convert': _ZLibEncoder_convert$,
        'startChunkedConversion': _ZLibEncoder_startChunkedConversion$,
      },
      {},
    ),
    'ZLibDecoder': m.ClassMirror(
      'ZLibDecoder',
      {
        '#as': ZLibDecoder_as$,
        '#is': ZLibDecoder_is$,
        'windowBits': _ZLibDecoder_windowBits$,
        'dictionary': _ZLibDecoder_dictionary$,
        'raw': _ZLibDecoder_raw$,
        'convert': _ZLibDecoder_convert$,
        'startChunkedConversion': _ZLibDecoder_startChunkedConversion$,
      },
      {},
    ),
    'RawZLibFilter': m.ClassMirror(
      'RawZLibFilter',
      {
        '#as': RawZLibFilter_as$,
        '#is': RawZLibFilter_is$,
        'process': _RawZLibFilter_process$,
        'processed': _RawZLibFilter_processed$,
      },
      {},
    ),
    'Directory': m.ClassMirror(
      'Directory',
      {
        '#as': Directory_as$,
        '#is': Directory_is$,
        'path': _Directory_path$,
        'uri': _Directory_uri$,
        'absolute': _Directory_absolute$,
        'create': _Directory_create$,
        'createSync': _Directory_createSync$,
        'createTemp': _Directory_createTemp$,
        'createTempSync': _Directory_createTempSync$,
        'resolveSymbolicLinks': _Directory_resolveSymbolicLinks$,
        'resolveSymbolicLinksSync': _Directory_resolveSymbolicLinksSync$,
        'rename': _Directory_rename$,
        'renameSync': _Directory_renameSync$,
        'list': _Directory_list$,
        'listSync': _Directory_listSync$,
        'toString': _Directory_toString$,
      },
      {},
    ),
    'FileMode': m.ClassMirror(
      'FileMode',
      {
        '#as': FileMode_as$,
        '#is': FileMode_is$,
      },
      {},
    ),
    'FileLock': m.ClassMirror(
      'FileLock',
      {
        '#as': FileLock_as$,
        '#is': FileLock_is$,
      },
      {},
    ),
    'File': m.ClassMirror(
      'File',
      {
        '#as': File_as$,
        '#is': File_is$,
        'absolute': _File_absolute$,
        'path': _File_path$,
        'create': _File_create$,
        'createSync': _File_createSync$,
        'rename': _File_rename$,
        'renameSync': _File_renameSync$,
        'copy': _File_copy$,
        'copySync': _File_copySync$,
        'length': _File_length$,
        'lengthSync': _File_lengthSync$,
        'lastAccessed': _File_lastAccessed$,
        'lastAccessedSync': _File_lastAccessedSync$,
        'setLastAccessed': _File_setLastAccessed$,
        'setLastAccessedSync': _File_setLastAccessedSync$,
        'lastModified': _File_lastModified$,
        'lastModifiedSync': _File_lastModifiedSync$,
        'setLastModified': _File_setLastModified$,
        'setLastModifiedSync': _File_setLastModifiedSync$,
        'open': _File_open$,
        'openSync': _File_openSync$,
        'openRead': _File_openRead$,
        'openWrite': _File_openWrite$,
        'readAsBytes': _File_readAsBytes$,
        'readAsBytesSync': _File_readAsBytesSync$,
        'readAsString': _File_readAsString$,
        'readAsStringSync': _File_readAsStringSync$,
        'readAsLines': _File_readAsLines$,
        'readAsLinesSync': _File_readAsLinesSync$,
        'writeAsBytes': _File_writeAsBytes$,
        'writeAsBytesSync': _File_writeAsBytesSync$,
        'writeAsString': _File_writeAsString$,
        'writeAsStringSync': _File_writeAsStringSync$,
      },
      {},
    ),
    'RandomAccessFile': m.ClassMirror(
      'RandomAccessFile',
      {
        '#as': RandomAccessFile_as$,
        '#is': RandomAccessFile_is$,
        'path': _RandomAccessFile_path$,
        'close': _RandomAccessFile_close$,
        'closeSync': _RandomAccessFile_closeSync$,
        'readByte': _RandomAccessFile_readByte$,
        'readByteSync': _RandomAccessFile_readByteSync$,
        'read': _RandomAccessFile_read$,
        'readSync': _RandomAccessFile_readSync$,
        'readInto': _RandomAccessFile_readInto$,
        'readIntoSync': _RandomAccessFile_readIntoSync$,
        'writeByte': _RandomAccessFile_writeByte$,
        'writeByteSync': _RandomAccessFile_writeByteSync$,
        'writeFrom': _RandomAccessFile_writeFrom$,
        'writeFromSync': _RandomAccessFile_writeFromSync$,
        'writeString': _RandomAccessFile_writeString$,
        'writeStringSync': _RandomAccessFile_writeStringSync$,
        'position': _RandomAccessFile_position$,
        'positionSync': _RandomAccessFile_positionSync$,
        'setPosition': _RandomAccessFile_setPosition$,
        'setPositionSync': _RandomAccessFile_setPositionSync$,
        'truncate': _RandomAccessFile_truncate$,
        'truncateSync': _RandomAccessFile_truncateSync$,
        'length': _RandomAccessFile_length$,
        'lengthSync': _RandomAccessFile_lengthSync$,
        'flush': _RandomAccessFile_flush$,
        'flushSync': _RandomAccessFile_flushSync$,
        'lock': _RandomAccessFile_lock$,
        'lockSync': _RandomAccessFile_lockSync$,
        'unlock': _RandomAccessFile_unlock$,
        'unlockSync': _RandomAccessFile_unlockSync$,
        'toString': _RandomAccessFile_toString$,
      },
      {},
    ),
    'FileSystemException': m.ClassMirror(
      'FileSystemException',
      {
        '#as': FileSystemException_as$,
        '#is': FileSystemException_is$,
        'message': _FileSystemException_message$,
        'path': _FileSystemException_path$,
        'osError': _FileSystemException_osError$,
        'toString': _FileSystemException_toString$,
      },
      {},
    ),
    'PathAccessException': m.ClassMirror(
      'PathAccessException',
      {
        '#as': PathAccessException_as$,
        '#is': PathAccessException_is$,
        'toString': _PathAccessException_toString$,
      },
      {},
    ),
    'PathExistsException': m.ClassMirror(
      'PathExistsException',
      {
        '#as': PathExistsException_as$,
        '#is': PathExistsException_is$,
        'toString': _PathExistsException_toString$,
      },
      {},
    ),
    'PathNotFoundException': m.ClassMirror(
      'PathNotFoundException',
      {
        '#as': PathNotFoundException_as$,
        '#is': PathNotFoundException_is$,
        'toString': _PathNotFoundException_toString$,
      },
      {},
    ),
    'ReadPipe': m.ClassMirror(
      'ReadPipe',
      {
        '#as': ReadPipe_as$,
        '#is': ReadPipe_is$,
      },
      {},
    ),
    'WritePipe': m.ClassMirror(
      'WritePipe',
      {
        '#as': WritePipe_as$,
        '#is': WritePipe_is$,
      },
      {},
    ),
    'Pipe': m.ClassMirror(
      'Pipe',
      {
        '#as': Pipe_as$,
        '#is': Pipe_is$,
        'read': _Pipe_read$,
        'write': _Pipe_write$,
      },
      {},
    ),
    'FileSystemEntityType': m.ClassMirror(
      'FileSystemEntityType',
      {
        '#as': FileSystemEntityType_as$,
        '#is': FileSystemEntityType_is$,
        'toString': _FileSystemEntityType_toString$,
      },
      {},
    ),
    'FileStat': m.ClassMirror(
      'FileStat',
      {
        '#as': FileStat_as$,
        '#is': FileStat_is$,
        'changed': _FileStat_changed$,
        'modified': _FileStat_modified$,
        'accessed': _FileStat_accessed$,
        'type': _FileStat_type$,
        'mode': _FileStat_mode$,
        'size': _FileStat_size$,
        'toString': _FileStat_toString$,
        'modeString': _FileStat_modeString$,
      },
      {},
    ),
    'FileSystemEntity': m.ClassMirror(
      'FileSystemEntity',
      {
        '#as': FileSystemEntity_as$,
        '#is': FileSystemEntity_is$,
        'path': _FileSystemEntity_path$,
        'uri': _FileSystemEntity_uri$,
        'isAbsolute': _FileSystemEntity_isAbsolute$,
        'absolute': _FileSystemEntity_absolute$,
        'parent': _FileSystemEntity_parent$,
        'exists': _FileSystemEntity_exists$,
        'existsSync': _FileSystemEntity_existsSync$,
        'rename': _FileSystemEntity_rename$,
        'renameSync': _FileSystemEntity_renameSync$,
        'resolveSymbolicLinks': _FileSystemEntity_resolveSymbolicLinks$,
        'resolveSymbolicLinksSync': _FileSystemEntity_resolveSymbolicLinksSync$,
        'stat': _FileSystemEntity_stat$,
        'statSync': _FileSystemEntity_statSync$,
        'delete': _FileSystemEntity_delete$,
        'deleteSync': _FileSystemEntity_deleteSync$,
        'watch': _FileSystemEntity_watch$,
      },
      {},
    ),
    'FileSystemEvent': m.ClassMirror(
      'FileSystemEvent',
      {
        '#as': FileSystemEvent_as$,
        '#is': FileSystemEvent_is$,
        'type': _FileSystemEvent_type$,
        'path': _FileSystemEvent_path$,
        'isDirectory': _FileSystemEvent_isDirectory$,
      },
      {},
    ),
    'FileSystemCreateEvent': m.ClassMirror(
      'FileSystemCreateEvent',
      {
        '#as': FileSystemCreateEvent_as$,
        '#is': FileSystemCreateEvent_is$,
        'toString': _FileSystemCreateEvent_toString$,
      },
      {},
    ),
    'FileSystemModifyEvent': m.ClassMirror(
      'FileSystemModifyEvent',
      {
        '#as': FileSystemModifyEvent_as$,
        '#is': FileSystemModifyEvent_is$,
        'contentChanged': _FileSystemModifyEvent_contentChanged$,
        'toString': _FileSystemModifyEvent_toString$,
      },
      {},
    ),
    'FileSystemDeleteEvent': m.ClassMirror(
      'FileSystemDeleteEvent',
      {
        '#as': FileSystemDeleteEvent_as$,
        '#is': FileSystemDeleteEvent_is$,
        'toString': _FileSystemDeleteEvent_toString$,
      },
      {},
    ),
    'FileSystemMoveEvent': m.ClassMirror(
      'FileSystemMoveEvent',
      {
        '#as': FileSystemMoveEvent_as$,
        '#is': FileSystemMoveEvent_is$,
        'destination': _FileSystemMoveEvent_destination$,
        'toString': _FileSystemMoveEvent_toString$,
      },
      {},
    ),
    'IOSink': m.ClassMirror(
      'IOSink',
      {
        '#as': IOSink_as$,
        '#is': IOSink_is$,
        'encoding': _IOSink_encoding$,
        'done': _IOSink_done$,
        'add': _IOSink_add$,
        'write': _IOSink_write$,
        'writeAll': _IOSink_writeAll$,
        'writeln': _IOSink_writeln$,
        'writeCharCode': _IOSink_writeCharCode$,
        'addError': _IOSink_addError$,
        'addStream': _IOSink_addStream$,
        'flush': _IOSink_flush$,
        'close': _IOSink_close$,
      },
      {'encoding': _IOSink_encoding_set$},
    ),
    'Link': m.ClassMirror(
      'Link',
      {
        '#as': Link_as$,
        '#is': Link_is$,
        'absolute': _Link_absolute$,
        'create': _Link_create$,
        'createSync': _Link_createSync$,
        'updateSync': _Link_updateSync$,
        'update': _Link_update$,
        'resolveSymbolicLinks': _Link_resolveSymbolicLinks$,
        'resolveSymbolicLinksSync': _Link_resolveSymbolicLinksSync$,
        'rename': _Link_rename$,
        'renameSync': _Link_renameSync$,
        'target': _Link_target$,
        'targetSync': _Link_targetSync$,
      },
      {},
    ),
    'IOOverrides': m.ClassMirror(
      'IOOverrides',
      {
        '#as': IOOverrides_as$,
        '#is': IOOverrides_is$,
        'stdin': _IOOverrides_stdin$,
        'stdout': _IOOverrides_stdout$,
        'stderr': _IOOverrides_stderr$,
        'runZoned': _IOOverrides_runZoned$,
        'runWithIOOverrides': _IOOverrides_runWithIOOverrides$,
        'createDirectory': _IOOverrides_createDirectory$,
        'getCurrentDirectory': _IOOverrides_getCurrentDirectory$,
        'setCurrentDirectory': _IOOverrides_setCurrentDirectory$,
        'getSystemTempDirectory': _IOOverrides_getSystemTempDirectory$,
        'createFile': _IOOverrides_createFile$,
        'stat': _IOOverrides_stat$,
        'statSync': _IOOverrides_statSync$,
        'fseIdentical': _IOOverrides_fseIdentical$,
        'fseIdenticalSync': _IOOverrides_fseIdenticalSync$,
        'fseGetType': _IOOverrides_fseGetType$,
        'fseGetTypeSync': _IOOverrides_fseGetTypeSync$,
        'fsWatch': _IOOverrides_fsWatch$,
        'fsWatchIsSupported': _IOOverrides_fsWatchIsSupported$,
        'createLink': _IOOverrides_createLink$,
        'socketConnect': _IOOverrides_socketConnect$,
        'socketStartConnect': _IOOverrides_socketStartConnect$,
        'serverSocketBind': _IOOverrides_serverSocketBind$,
      },
      {},
    ),
    'Platform': m.ClassMirror(
      'Platform',
      {
        '#as': Platform_as$,
        '#is': Platform_is$,
      },
      {},
    ),
    'ProcessInfo': m.ClassMirror(
      'ProcessInfo',
      {
        '#as': ProcessInfo_as$,
        '#is': ProcessInfo_is$,
      },
      {},
    ),
    'ProcessStartMode': m.ClassMirror(
      'ProcessStartMode',
      {
        '#as': ProcessStartMode_as$,
        '#is': ProcessStartMode_is$,
        'toString': _ProcessStartMode_toString$,
      },
      {},
    ),
    'Process': m.ClassMirror(
      'Process',
      {
        '#as': Process_as$,
        '#is': Process_is$,
        'exitCode': _Process_exitCode$,
        'stdout': _Process_stdout$,
        'stderr': _Process_stderr$,
        'stdin': _Process_stdin$,
        'pid': _Process_pid$,
        'kill': _Process_kill$,
      },
      {},
    ),
    'ProcessResult': m.ClassMirror(
      'ProcessResult',
      {
        '#as': ProcessResult_as$,
        '#is': ProcessResult_is$,
        'exitCode': _ProcessResult_exitCode$,
        'stdout': _ProcessResult_stdout$,
        'stderr': _ProcessResult_stderr$,
        'pid': _ProcessResult_pid$,
      },
      {},
    ),
    'ProcessSignal': m.ClassMirror(
      'ProcessSignal',
      {
        '#as': ProcessSignal_as$,
        '#is': ProcessSignal_is$,
        'signalNumber': _ProcessSignal_signalNumber$,
        'name': _ProcessSignal_name$,
        'toString': _ProcessSignal_toString$,
        'watch': _ProcessSignal_watch$,
      },
      {},
    ),
    'SignalException': m.ClassMirror(
      'SignalException',
      {
        '#as': SignalException_as$,
        '#is': SignalException_is$,
        'message': _SignalException_message$,
        'osError': _SignalException_osError$,
        'toString': _SignalException_toString$,
      },
      {},
    ),
    'ProcessException': m.ClassMirror(
      'ProcessException',
      {
        '#as': ProcessException_as$,
        '#is': ProcessException_is$,
        'executable': _ProcessException_executable$,
        'arguments': _ProcessException_arguments$,
        'message': _ProcessException_message$,
        'errorCode': _ProcessException_errorCode$,
        'toString': _ProcessException_toString$,
      },
      {},
    ),
    'SecureServerSocket': m.ClassMirror(
      'SecureServerSocket',
      {
        '#as': SecureServerSocket_as$,
        '#is': SecureServerSocket_is$,
        'port': _SecureServerSocket_port$,
        'address': _SecureServerSocket_address$,
        'listen': _SecureServerSocket_listen$,
        'close': _SecureServerSocket_close$,
      },
      {},
    ),
    'RawSecureServerSocket': m.ClassMirror(
      'RawSecureServerSocket',
      {
        '#as': RawSecureServerSocket_as$,
        '#is': RawSecureServerSocket_is$,
        'requestClientCertificate':
            _RawSecureServerSocket_requestClientCertificate$,
        'requireClientCertificate':
            _RawSecureServerSocket_requireClientCertificate$,
        'supportedProtocols': _RawSecureServerSocket_supportedProtocols$,
        'port': _RawSecureServerSocket_port$,
        'address': _RawSecureServerSocket_address$,
        'listen': _RawSecureServerSocket_listen$,
        'close': _RawSecureServerSocket_close$,
      },
      {},
    ),
    'SecureSocket': m.ClassMirror(
      'SecureSocket',
      {
        '#as': SecureSocket_as$,
        '#is': SecureSocket_is$,
        'peerCertificate': _SecureSocket_peerCertificate$,
        'selectedProtocol': _SecureSocket_selectedProtocol$,
        'connect': _SecureSocket_connect$,
        'startConnect': _SecureSocket_startConnect$,
        'secure': _SecureSocket_secure$,
      },
      {},
    ),
    'RawSecureSocket': m.ClassMirror(
      'RawSecureSocket',
      {
        '#as': RawSecureSocket_as$,
        '#is': RawSecureSocket_is$,
        'peerCertificate': _RawSecureSocket_peerCertificate$,
        'selectedProtocol': _RawSecureSocket_selectedProtocol$,
        'connect': _RawSecureSocket_connect$,
        'startConnect': _RawSecureSocket_startConnect$,
        'secure': _RawSecureSocket_secure$,
      },
      {},
    ),
    'X509Certificate': m.ClassMirror(
      'X509Certificate',
      {
        '#as': X509Certificate_as$,
        '#is': X509Certificate_is$,
        'der': _X509Certificate_der$,
        'pem': _X509Certificate_pem$,
        'sha1': _X509Certificate_sha1$,
        'subject': _X509Certificate_subject$,
        'issuer': _X509Certificate_issuer$,
        'startValidity': _X509Certificate_startValidity$,
        'endValidity': _X509Certificate_endValidity$,
      },
      {},
    ),
    'TlsException': m.ClassMirror(
      'TlsException',
      {
        '#as': TlsException_as$,
        '#is': TlsException_is$,
        'type': _TlsException_type$,
        'message': _TlsException_message$,
        'osError': _TlsException_osError$,
        'toString': _TlsException_toString$,
      },
      {},
    ),
    'HandshakeException': m.ClassMirror(
      'HandshakeException',
      {
        '#as': HandshakeException_as$,
        '#is': HandshakeException_is$,
      },
      {},
    ),
    'CertificateException': m.ClassMirror(
      'CertificateException',
      {
        '#as': CertificateException_as$,
        '#is': CertificateException_is$,
      },
      {},
    ),
    'SecurityContext': m.ClassMirror(
      'SecurityContext',
      {
        '#as': SecurityContext_as$,
        '#is': SecurityContext_is$,
        'allowLegacyUnsafeRenegotiation':
            _SecurityContext_allowLegacyUnsafeRenegotiation$,
        'usePrivateKey': _SecurityContext_usePrivateKey$,
        'usePrivateKeyBytes': _SecurityContext_usePrivateKeyBytes$,
        'setTrustedCertificates': _SecurityContext_setTrustedCertificates$,
        'setTrustedCertificatesBytes':
            _SecurityContext_setTrustedCertificatesBytes$,
        'useCertificateChain': _SecurityContext_useCertificateChain$,
        'useCertificateChainBytes': _SecurityContext_useCertificateChainBytes$,
        'setClientAuthorities': _SecurityContext_setClientAuthorities$,
        'setClientAuthoritiesBytes':
            _SecurityContext_setClientAuthoritiesBytes$,
        'setAlpnProtocols': _SecurityContext_setAlpnProtocols$,
      },
      {
        'allowLegacyUnsafeRenegotiation':
            _SecurityContext_allowLegacyUnsafeRenegotiation_set$
      },
    ),
    'InternetAddressType': m.ClassMirror(
      'InternetAddressType',
      {
        '#as': InternetAddressType_as$,
        '#is': InternetAddressType_is$,
        'name': _InternetAddressType_name$,
        'toString': _InternetAddressType_toString$,
      },
      {},
    ),
    'InternetAddress': m.ClassMirror(
      'InternetAddress',
      {
        '#as': InternetAddress_as$,
        '#is': InternetAddress_is$,
        'type': _InternetAddress_type$,
        'address': _InternetAddress_address$,
        'host': _InternetAddress_host$,
        'rawAddress': _InternetAddress_rawAddress$,
        'isLoopback': _InternetAddress_isLoopback$,
        'isLinkLocal': _InternetAddress_isLinkLocal$,
        'isMulticast': _InternetAddress_isMulticast$,
        'reverse': _InternetAddress_reverse$,
      },
      {},
    ),
    'NetworkInterface': m.ClassMirror(
      'NetworkInterface',
      {
        '#as': NetworkInterface_as$,
        '#is': NetworkInterface_is$,
        'name': _NetworkInterface_name$,
        'index': _NetworkInterface_index$,
        'addresses': _NetworkInterface_addresses$,
      },
      {},
    ),
    'RawServerSocket': m.ClassMirror(
      'RawServerSocket',
      {
        '#as': RawServerSocket_as$,
        '#is': RawServerSocket_is$,
        'port': _RawServerSocket_port$,
        'address': _RawServerSocket_address$,
        'close': _RawServerSocket_close$,
      },
      {},
    ),
    'ServerSocket': m.ClassMirror(
      'ServerSocket',
      {
        '#as': ServerSocket_as$,
        '#is': ServerSocket_is$,
        'port': _ServerSocket_port$,
        'address': _ServerSocket_address$,
        'close': _ServerSocket_close$,
      },
      {},
    ),
    'SocketDirection': m.ClassMirror(
      'SocketDirection',
      {
        '#as': SocketDirection_as$,
        '#is': SocketDirection_is$,
      },
      {},
    ),
    'SocketOption': m.ClassMirror(
      'SocketOption',
      {
        '#as': SocketOption_as$,
        '#is': SocketOption_is$,
      },
      {},
    ),
    'RawSocketOption': m.ClassMirror(
      'RawSocketOption',
      {
        '#as': RawSocketOption_as$,
        '#is': RawSocketOption_is$,
        'level': _RawSocketOption_level$,
        'option': _RawSocketOption_option$,
        'value': _RawSocketOption_value$,
      },
      {},
    ),
    'RawSocketEvent': m.ClassMirror(
      'RawSocketEvent',
      {
        '#as': RawSocketEvent_as$,
        '#is': RawSocketEvent_is$,
        'toString': _RawSocketEvent_toString$,
      },
      {},
    ),
    'ConnectionTask': m.ClassMirror(
      'ConnectionTask',
      {
        '#as': ConnectionTask_as$,
        '#is': ConnectionTask_is$,
        'socket': _ConnectionTask_socket$,
        'cancel': _ConnectionTask_cancel$,
      },
      {},
    ),
    'RawSocket': m.ClassMirror(
      'RawSocket',
      {
        '#as': RawSocket_as$,
        '#is': RawSocket_is$,
        'readEventsEnabled': _RawSocket_readEventsEnabled$,
        'writeEventsEnabled': _RawSocket_writeEventsEnabled$,
        'port': _RawSocket_port$,
        'remotePort': _RawSocket_remotePort$,
        'address': _RawSocket_address$,
        'remoteAddress': _RawSocket_remoteAddress$,
        'available': _RawSocket_available$,
        'read': _RawSocket_read$,
        'readMessage': _RawSocket_readMessage$,
        'write': _RawSocket_write$,
        'sendMessage': _RawSocket_sendMessage$,
        'close': _RawSocket_close$,
        'shutdown': _RawSocket_shutdown$,
        'setOption': _RawSocket_setOption$,
        'getRawOption': _RawSocket_getRawOption$,
        'setRawOption': _RawSocket_setRawOption$,
      },
      {
        'readEventsEnabled': _RawSocket_readEventsEnabled_set$,
        'writeEventsEnabled': _RawSocket_writeEventsEnabled_set$,
      },
    ),
    'Socket': m.ClassMirror(
      'Socket',
      {
        '#as': Socket_as$,
        '#is': Socket_is$,
        'port': _Socket_port$,
        'remotePort': _Socket_remotePort$,
        'address': _Socket_address$,
        'remoteAddress': _Socket_remoteAddress$,
        'done': _Socket_done$,
        'destroy': _Socket_destroy$,
        'setOption': _Socket_setOption$,
        'getRawOption': _Socket_getRawOption$,
        'setRawOption': _Socket_setRawOption$,
        'close': _Socket_close$,
      },
      {},
    ),
    'Datagram': m.ClassMirror(
      'Datagram',
      {
        '#as': Datagram_as$,
        '#is': Datagram_is$,
        'data': _Datagram_data$,
        'address': _Datagram_address$,
        'port': _Datagram_port$,
      },
      {
        'data': _Datagram_data_set$,
        'address': _Datagram_address_set$,
        'port': _Datagram_port_set$,
      },
    ),
    'ResourceHandle': m.ClassMirror(
      'ResourceHandle',
      {
        '#as': ResourceHandle_as$,
        '#is': ResourceHandle_is$,
        'toFile': _ResourceHandle_toFile$,
        'toSocket': _ResourceHandle_toSocket$,
        'toRawSocket': _ResourceHandle_toRawSocket$,
        'toRawDatagramSocket': _ResourceHandle_toRawDatagramSocket$,
        'toReadPipe': _ResourceHandle_toReadPipe$,
        'toWritePipe': _ResourceHandle_toWritePipe$,
      },
      {},
    ),
    'SocketControlMessage': m.ClassMirror(
      'SocketControlMessage',
      {
        '#as': SocketControlMessage_as$,
        '#is': SocketControlMessage_is$,
        'level': _SocketControlMessage_level$,
        'type': _SocketControlMessage_type$,
        'data': _SocketControlMessage_data$,
        'extractHandles': _SocketControlMessage_extractHandles$,
      },
      {},
    ),
    'SocketMessage': m.ClassMirror(
      'SocketMessage',
      {
        '#as': SocketMessage_as$,
        '#is': SocketMessage_is$,
        'data': _SocketMessage_data$,
        'controlMessages': _SocketMessage_controlMessages$,
      },
      {},
    ),
    'RawDatagramSocket': m.ClassMirror(
      'RawDatagramSocket',
      {
        '#as': RawDatagramSocket_as$,
        '#is': RawDatagramSocket_is$,
        'readEventsEnabled': _RawDatagramSocket_readEventsEnabled$,
        'writeEventsEnabled': _RawDatagramSocket_writeEventsEnabled$,
        'multicastLoopback': _RawDatagramSocket_multicastLoopback$,
        'multicastHops': _RawDatagramSocket_multicastHops$,
        'multicastInterface': _RawDatagramSocket_multicastInterface$,
        'broadcastEnabled': _RawDatagramSocket_broadcastEnabled$,
        'port': _RawDatagramSocket_port$,
        'address': _RawDatagramSocket_address$,
        'close': _RawDatagramSocket_close$,
        'send': _RawDatagramSocket_send$,
        'receive': _RawDatagramSocket_receive$,
        'joinMulticast': _RawDatagramSocket_joinMulticast$,
        'leaveMulticast': _RawDatagramSocket_leaveMulticast$,
        'getRawOption': _RawDatagramSocket_getRawOption$,
        'setRawOption': _RawDatagramSocket_setRawOption$,
      },
      {
        'readEventsEnabled': _RawDatagramSocket_readEventsEnabled_set$,
        'writeEventsEnabled': _RawDatagramSocket_writeEventsEnabled_set$,
        'multicastLoopback': _RawDatagramSocket_multicastLoopback_set$,
        'multicastHops': _RawDatagramSocket_multicastHops_set$,
        'multicastInterface': _RawDatagramSocket_multicastInterface_set$,
        'broadcastEnabled': _RawDatagramSocket_broadcastEnabled_set$,
      },
    ),
    'SocketException': m.ClassMirror(
      'SocketException',
      {
        '#as': SocketException_as$,
        '#is': SocketException_is$,
        'message': _SocketException_message$,
        'osError': _SocketException_osError$,
        'address': _SocketException_address$,
        'port': _SocketException_port$,
        'toString': _SocketException_toString$,
      },
      {},
    ),
    'Stdin': m.ClassMirror(
      'Stdin',
      {
        '#as': Stdin_as$,
        '#is': Stdin_is$,
        'echoMode': _Stdin_echoMode$,
        'echoNewlineMode': _Stdin_echoNewlineMode$,
        'lineMode': _Stdin_lineMode$,
        'supportsAnsiEscapes': _Stdin_supportsAnsiEscapes$,
        'hasTerminal': _Stdin_hasTerminal$,
        'readLineSync': _Stdin_readLineSync$,
        'readByteSync': _Stdin_readByteSync$,
      },
      {
        'echoMode': _Stdin_echoMode_set$,
        'echoNewlineMode': _Stdin_echoNewlineMode_set$,
        'lineMode': _Stdin_lineMode_set$,
      },
    ),
    'Stdout': m.ClassMirror(
      'Stdout',
      {
        '#as': Stdout_as$,
        '#is': Stdout_is$,
        'hasTerminal': _Stdout_hasTerminal$,
        'terminalColumns': _Stdout_terminalColumns$,
        'terminalLines': _Stdout_terminalLines$,
        'supportsAnsiEscapes': _Stdout_supportsAnsiEscapes$,
        'nonBlocking': _Stdout_nonBlocking$,
      },
      {},
    ),
    'StdoutException': m.ClassMirror(
      'StdoutException',
      {
        '#as': StdoutException_as$,
        '#is': StdoutException_is$,
        'message': _StdoutException_message$,
        'osError': _StdoutException_osError$,
        'toString': _StdoutException_toString$,
      },
      {},
    ),
    'StdinException': m.ClassMirror(
      'StdinException',
      {
        '#as': StdinException_as$,
        '#is': StdinException_is$,
        'message': _StdinException_message$,
        'osError': _StdinException_osError$,
        'toString': _StdinException_toString$,
      },
      {},
    ),
    'StdioType': m.ClassMirror(
      'StdioType',
      {
        '#as': StdioType_as$,
        '#is': StdioType_is$,
        'name': _StdioType_name$,
        'toString': _StdioType_toString$,
      },
      {},
    ),
    'SystemEncoding': m.ClassMirror(
      'SystemEncoding',
      {
        '#as': SystemEncoding_as$,
        '#is': SystemEncoding_is$,
        'name': _SystemEncoding_name$,
        'encoder': _SystemEncoding_encoder$,
        'decoder': _SystemEncoding_decoder$,
        'encode': _SystemEncoding_encode$,
        'decode': _SystemEncoding_decode$,
      },
      {},
    ),
    'RawSynchronousSocket': m.ClassMirror(
      'RawSynchronousSocket',
      {
        '#as': RawSynchronousSocket_as$,
        '#is': RawSynchronousSocket_is$,
        'port': _RawSynchronousSocket_port$,
        'remotePort': _RawSynchronousSocket_remotePort$,
        'address': _RawSynchronousSocket_address$,
        'remoteAddress': _RawSynchronousSocket_remoteAddress$,
        'available': _RawSynchronousSocket_available$,
        'closeSync': _RawSynchronousSocket_closeSync$,
        'readIntoSync': _RawSynchronousSocket_readIntoSync$,
        'readSync': _RawSynchronousSocket_readSync$,
        'shutdown': _RawSynchronousSocket_shutdown$,
        'writeFromSync': _RawSynchronousSocket_writeFromSync$,
      },
      {},
    ),
  },
);
Function IOException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IOException;
Function IOException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IOException;
Function _IOException_toString$(
  m.Scope scope$,
  IOException target$,
) =>
    target$.toString;
Function OSError_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as OSError;
Function OSError_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is OSError;
Function _OSError_noErrorCode$(m.Scope scope$) => () => OSError.noErrorCode;
Function _OSError_message$(
  m.Scope scope$,
  OSError target$,
) =>
    () {
      return target$.message;
    };
Function _OSError_errorCode$(
  m.Scope scope$,
  OSError target$,
) =>
    () {
      return target$.errorCode;
    };
Function _OSError__$(m.Scope scope$) => ([
      String? message,
      int? errorCode,
    ]) {
      if (message == null && errorCode == null) {
        return OSError();
      }
      if (errorCode == null) {
        return OSError(message!);
      }
      return OSError(
        message!,
        errorCode!,
      );
    };
Function _OSError_toString$(
  m.Scope scope$,
  OSError target$,
) =>
    target$.toString;
Function _zlib$(m.Scope scope$) => () => zlib;
Function _gzip$(m.Scope scope$) => () => gzip;
Function ZLibOption_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ZLibOption;
Function ZLibOption_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ZLibOption;
Function _ZLibOption_minWindowBits$(m.Scope scope$) =>
    () => ZLibOption.minWindowBits;
Function _ZLibOption_maxWindowBits$(m.Scope scope$) =>
    () => ZLibOption.maxWindowBits;
Function _ZLibOption_defaultWindowBits$(m.Scope scope$) =>
    () => ZLibOption.defaultWindowBits;
Function _ZLibOption_minLevel$(m.Scope scope$) => () => ZLibOption.minLevel;
Function _ZLibOption_maxLevel$(m.Scope scope$) => () => ZLibOption.maxLevel;
Function _ZLibOption_defaultLevel$(m.Scope scope$) =>
    () => ZLibOption.defaultLevel;
Function _ZLibOption_minMemLevel$(m.Scope scope$) =>
    () => ZLibOption.minMemLevel;
Function _ZLibOption_maxMemLevel$(m.Scope scope$) =>
    () => ZLibOption.maxMemLevel;
Function _ZLibOption_defaultMemLevel$(m.Scope scope$) =>
    () => ZLibOption.defaultMemLevel;
Function _ZLibOption_strategyFiltered$(m.Scope scope$) =>
    () => ZLibOption.strategyFiltered;
Function _ZLibOption_strategyHuffmanOnly$(m.Scope scope$) =>
    () => ZLibOption.strategyHuffmanOnly;
Function _ZLibOption_strategyRle$(m.Scope scope$) =>
    () => ZLibOption.strategyRle;
Function _ZLibOption_strategyFixed$(m.Scope scope$) =>
    () => ZLibOption.strategyFixed;
Function _ZLibOption_strategyDefault$(m.Scope scope$) =>
    () => ZLibOption.strategyDefault;
Function ZLibCodec_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ZLibCodec;
Function ZLibCodec_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ZLibCodec;
Function _ZLibCodec_gzip$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.gzip;
    };
Function _ZLibCodec_level$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.level;
    };
Function _ZLibCodec_memLevel$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.memLevel;
    };
Function _ZLibCodec_strategy$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.strategy;
    };
Function _ZLibCodec_windowBits$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.windowBits;
    };
Function _ZLibCodec_raw$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.raw;
    };
Function _ZLibCodec_dictionary$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.dictionary;
    };
Function _ZLibCodec_encoder$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.encoder;
    };
Function _ZLibCodec_decoder$(
  m.Scope scope$,
  ZLibCodec target$,
) =>
    () {
      return target$.decoder;
    };
Function _ZLibCodec__$(m.Scope scope$) => ({
      int? level,
      int? windowBits,
      int? memLevel,
      int? strategy,
      List? dictionary,
      bool? raw,
      bool? gzip,
    }) {
      return ZLibCodec(
        dictionary: dictionary == null ? null : List.from(dictionary),
        gzip: gzip ?? false,
        level: level ?? ZLibOption.defaultLevel,
        memLevel: memLevel ?? ZLibOption.defaultMemLevel,
        raw: raw ?? false,
        strategy: strategy ?? ZLibOption.strategyDefault,
        windowBits: windowBits ?? ZLibOption.defaultWindowBits,
      );
    };
Function GZipCodec_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as GZipCodec;
Function GZipCodec_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is GZipCodec;
Function _GZipCodec_gzip$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.gzip;
    };
Function _GZipCodec_level$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.level;
    };
Function _GZipCodec_memLevel$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.memLevel;
    };
Function _GZipCodec_strategy$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.strategy;
    };
Function _GZipCodec_windowBits$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.windowBits;
    };
Function _GZipCodec_dictionary$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.dictionary;
    };
Function _GZipCodec_raw$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.raw;
    };
Function _GZipCodec_encoder$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.encoder;
    };
Function _GZipCodec_decoder$(
  m.Scope scope$,
  GZipCodec target$,
) =>
    () {
      return target$.decoder;
    };
Function _GZipCodec__$(m.Scope scope$) => ({
      int? level,
      int? windowBits,
      int? memLevel,
      int? strategy,
      List? dictionary,
      bool? raw,
      bool? gzip,
    }) {
      return GZipCodec(
        dictionary: dictionary == null ? null : List.from(dictionary),
        gzip: gzip ?? true,
        level: level ?? ZLibOption.defaultLevel,
        memLevel: memLevel ?? ZLibOption.defaultMemLevel,
        raw: raw ?? false,
        strategy: strategy ?? ZLibOption.strategyDefault,
        windowBits: windowBits ?? ZLibOption.defaultWindowBits,
      );
    };
Function ZLibEncoder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ZLibEncoder;
Function ZLibEncoder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ZLibEncoder;
Function _ZLibEncoder_gzip$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.gzip;
    };
Function _ZLibEncoder_level$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.level;
    };
Function _ZLibEncoder_memLevel$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.memLevel;
    };
Function _ZLibEncoder_strategy$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.strategy;
    };
Function _ZLibEncoder_windowBits$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.windowBits;
    };
Function _ZLibEncoder_dictionary$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.dictionary;
    };
Function _ZLibEncoder_raw$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    () {
      return target$.raw;
    };
Function _ZLibEncoder__$(m.Scope scope$) => ({
      bool? gzip,
      int? level,
      int? windowBits,
      int? memLevel,
      int? strategy,
      List? dictionary,
      bool? raw,
    }) {
      return ZLibEncoder(
        dictionary: dictionary == null ? null : List.from(dictionary),
        gzip: gzip ?? false,
        level: level ?? ZLibOption.defaultLevel,
        memLevel: memLevel ?? ZLibOption.defaultMemLevel,
        raw: raw ?? false,
        strategy: strategy ?? ZLibOption.strategyDefault,
        windowBits: windowBits ?? ZLibOption.defaultWindowBits,
      );
    };
Function _ZLibEncoder_convert$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    target$.convert;
Function _ZLibEncoder_startChunkedConversion$(
  m.Scope scope$,
  ZLibEncoder target$,
) =>
    target$.startChunkedConversion;
Function ZLibDecoder_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ZLibDecoder;
Function ZLibDecoder_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ZLibDecoder;
Function _ZLibDecoder_windowBits$(
  m.Scope scope$,
  ZLibDecoder target$,
) =>
    () {
      return target$.windowBits;
    };
Function _ZLibDecoder_dictionary$(
  m.Scope scope$,
  ZLibDecoder target$,
) =>
    () {
      return target$.dictionary;
    };
Function _ZLibDecoder_raw$(
  m.Scope scope$,
  ZLibDecoder target$,
) =>
    () {
      return target$.raw;
    };
Function _ZLibDecoder__$(m.Scope scope$) => ({
      int? windowBits,
      List? dictionary,
      bool? raw,
    }) {
      return ZLibDecoder(
        dictionary: dictionary == null ? null : List.from(dictionary),
        raw: raw ?? false,
        windowBits: windowBits ?? ZLibOption.defaultWindowBits,
      );
    };
Function _ZLibDecoder_convert$(
  m.Scope scope$,
  ZLibDecoder target$,
) =>
    target$.convert;
Function _ZLibDecoder_startChunkedConversion$(
  m.Scope scope$,
  ZLibDecoder target$,
) =>
    target$.startChunkedConversion;
Function RawZLibFilter_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawZLibFilter;
Function RawZLibFilter_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawZLibFilter;
Function _RawZLibFilter_deflateFilter_$(m.Scope scope$) =>
    RawZLibFilter.deflateFilter;
Function _RawZLibFilter_inflateFilter_$(m.Scope scope$) =>
    RawZLibFilter.inflateFilter;
Function _RawZLibFilter_process$(
  m.Scope scope$,
  RawZLibFilter target$,
) =>
    target$.process;
Function _RawZLibFilter_processed$(
  m.Scope scope$,
  RawZLibFilter target$,
) =>
    target$.processed;
Function Directory_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Directory;
Function Directory_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Directory;
Function _Directory_path$(
  m.Scope scope$,
  Directory target$,
) =>
    () {
      return target$.path;
    };
Function _Directory_current$(m.Scope scope$) => () => Directory.current;
Function _Directory_uri$(
  m.Scope scope$,
  Directory target$,
) =>
    () {
      return target$.uri;
    };
void _Directory_current_set$(dynamic other$) {
  Directory.current = other$;
}

Function _Directory_systemTemp$(m.Scope scope$) => () => Directory.systemTemp;
Function _Directory_absolute$(
  m.Scope scope$,
  Directory target$,
) =>
    () {
      return target$.absolute;
    };
Function _Directory__$(m.Scope scope$) => (String path) {
      return Directory(path);
    };
Function _Directory_fromRawPath_$(m.Scope scope$) => Directory.fromRawPath;
Function _Directory_fromUri_$(m.Scope scope$) => Directory.fromUri;
Function _Directory_create$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.create;
Function _Directory_createSync$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.createSync;
Function _Directory_createTemp$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.createTemp;
Function _Directory_createTempSync$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.createTempSync;
Function _Directory_resolveSymbolicLinks$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.resolveSymbolicLinks;
Function _Directory_resolveSymbolicLinksSync$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.resolveSymbolicLinksSync;
Function _Directory_rename$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.rename;
Function _Directory_renameSync$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.renameSync;
Function _Directory_list$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.list;
Function _Directory_listSync$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.listSync;
Function _Directory_toString$(
  m.Scope scope$,
  Directory target$,
) =>
    target$.toString;
Function FileMode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileMode;
Function FileMode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileMode;
Function _FileMode_read$(m.Scope scope$) => () => FileMode.read;
Function _FileMode_write$(m.Scope scope$) => () => FileMode.write;
Function _FileMode_append$(m.Scope scope$) => () => FileMode.append;
Function _FileMode_writeOnly$(m.Scope scope$) => () => FileMode.writeOnly;
Function _FileMode_writeOnlyAppend$(m.Scope scope$) =>
    () => FileMode.writeOnlyAppend;
Function FileLock_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileLock;
Function FileLock_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileLock;
Function _FileLock_shared$(m.Scope scope$) => () => FileLock.shared;
Function _FileLock_exclusive$(m.Scope scope$) => () => FileLock.exclusive;
Function _FileLock_blockingShared$(m.Scope scope$) =>
    () => FileLock.blockingShared;
Function _FileLock_blockingExclusive$(m.Scope scope$) =>
    () => FileLock.blockingExclusive;
Function File_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as File;
Function File_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is File;
Function _File_absolute$(
  m.Scope scope$,
  File target$,
) =>
    () {
      return target$.absolute;
    };
Function _File_path$(
  m.Scope scope$,
  File target$,
) =>
    () {
      return target$.path;
    };
Function _File__$(m.Scope scope$) => (String path) {
      return File(path);
    };
Function _File_fromUri_$(m.Scope scope$) => File.fromUri;
Function _File_fromRawPath_$(m.Scope scope$) => File.fromRawPath;
Function _File_create$(
  m.Scope scope$,
  File target$,
) =>
    target$.create;
Function _File_createSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.createSync;
Function _File_rename$(
  m.Scope scope$,
  File target$,
) =>
    target$.rename;
Function _File_renameSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.renameSync;
Function _File_copy$(
  m.Scope scope$,
  File target$,
) =>
    target$.copy;
Function _File_copySync$(
  m.Scope scope$,
  File target$,
) =>
    target$.copySync;
Function _File_length$(
  m.Scope scope$,
  File target$,
) =>
    target$.length;
Function _File_lengthSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.lengthSync;
Function _File_lastAccessed$(
  m.Scope scope$,
  File target$,
) =>
    target$.lastAccessed;
Function _File_lastAccessedSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.lastAccessedSync;
Function _File_setLastAccessed$(
  m.Scope scope$,
  File target$,
) =>
    target$.setLastAccessed;
Function _File_setLastAccessedSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.setLastAccessedSync;
Function _File_lastModified$(
  m.Scope scope$,
  File target$,
) =>
    target$.lastModified;
Function _File_lastModifiedSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.lastModifiedSync;
Function _File_setLastModified$(
  m.Scope scope$,
  File target$,
) =>
    target$.setLastModified;
Function _File_setLastModifiedSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.setLastModifiedSync;
Function _File_open$(
  m.Scope scope$,
  File target$,
) =>
    target$.open;
Function _File_openSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.openSync;
Function _File_openRead$(
  m.Scope scope$,
  File target$,
) =>
    target$.openRead;
Function _File_openWrite$(
  m.Scope scope$,
  File target$,
) =>
    target$.openWrite;
Function _File_readAsBytes$(
  m.Scope scope$,
  File target$,
) =>
    target$.readAsBytes;
Function _File_readAsBytesSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.readAsBytesSync;
Function _File_readAsString$(
  m.Scope scope$,
  File target$,
) =>
    target$.readAsString;
Function _File_readAsStringSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.readAsStringSync;
Function _File_readAsLines$(
  m.Scope scope$,
  File target$,
) =>
    target$.readAsLines;
Function _File_readAsLinesSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.readAsLinesSync;
Function _File_writeAsBytes$(
  m.Scope scope$,
  File target$,
) =>
    target$.writeAsBytes;
Function _File_writeAsBytesSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.writeAsBytesSync;
Function _File_writeAsString$(
  m.Scope scope$,
  File target$,
) =>
    target$.writeAsString;
Function _File_writeAsStringSync$(
  m.Scope scope$,
  File target$,
) =>
    target$.writeAsStringSync;
Function RandomAccessFile_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RandomAccessFile;
Function RandomAccessFile_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RandomAccessFile;
Function _RandomAccessFile_path$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    () {
      return target$.path;
    };
Function _RandomAccessFile_close$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.close;
Function _RandomAccessFile_closeSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.closeSync;
Function _RandomAccessFile_readByte$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.readByte;
Function _RandomAccessFile_readByteSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.readByteSync;
Function _RandomAccessFile_read$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.read;
Function _RandomAccessFile_readSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.readSync;
Function _RandomAccessFile_readInto$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.readInto;
Function _RandomAccessFile_readIntoSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.readIntoSync;
Function _RandomAccessFile_writeByte$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.writeByte;
Function _RandomAccessFile_writeByteSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.writeByteSync;
Function _RandomAccessFile_writeFrom$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.writeFrom;
Function _RandomAccessFile_writeFromSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.writeFromSync;
Function _RandomAccessFile_writeString$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.writeString;
Function _RandomAccessFile_writeStringSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.writeStringSync;
Function _RandomAccessFile_position$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.position;
Function _RandomAccessFile_positionSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.positionSync;
Function _RandomAccessFile_setPosition$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.setPosition;
Function _RandomAccessFile_setPositionSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.setPositionSync;
Function _RandomAccessFile_truncate$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.truncate;
Function _RandomAccessFile_truncateSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.truncateSync;
Function _RandomAccessFile_length$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.length;
Function _RandomAccessFile_lengthSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.lengthSync;
Function _RandomAccessFile_flush$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.flush;
Function _RandomAccessFile_flushSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.flushSync;
Function _RandomAccessFile_lock$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.lock;
Function _RandomAccessFile_lockSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.lockSync;
Function _RandomAccessFile_unlock$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.unlock;
Function _RandomAccessFile_unlockSync$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.unlockSync;
Function _RandomAccessFile_toString$(
  m.Scope scope$,
  RandomAccessFile target$,
) =>
    target$.toString;
Function FileSystemException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemException;
Function FileSystemException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemException;
Function _FileSystemException_message$(
  m.Scope scope$,
  FileSystemException target$,
) =>
    () {
      return target$.message;
    };
Function _FileSystemException_path$(
  m.Scope scope$,
  FileSystemException target$,
) =>
    () {
      return target$.path;
    };
Function _FileSystemException_osError$(
  m.Scope scope$,
  FileSystemException target$,
) =>
    () {
      return target$.osError;
    };
Function _FileSystemException__$(m.Scope scope$) => ([
      String? message,
      String? path,
      OSError? osError,
    ]) {
      if (message == null && path == null && osError == null) {
        return FileSystemException();
      }
      if (path == null && osError == null) {
        return FileSystemException(message!);
      }
      if (osError == null) {
        return FileSystemException(
          message!,
          path!,
        );
      }
      return FileSystemException(
        message!,
        path!,
        osError!,
      );
    };
Function _FileSystemException_toString$(
  m.Scope scope$,
  FileSystemException target$,
) =>
    target$.toString;
Function PathAccessException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathAccessException;
Function PathAccessException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathAccessException;
Function _PathAccessException__$(m.Scope scope$) => (
      String path,
      OSError osError, [
      String? message,
    ]) {
      if (message == null) {
        return PathAccessException(
          path,
          osError,
        );
      }
      return PathAccessException(
        path,
        osError,
        message!,
      );
    };
Function _PathAccessException_toString$(
  m.Scope scope$,
  PathAccessException target$,
) =>
    target$.toString;
Function PathExistsException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathExistsException;
Function PathExistsException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathExistsException;
Function _PathExistsException__$(m.Scope scope$) => (
      String path,
      OSError osError, [
      String? message,
    ]) {
      if (message == null) {
        return PathExistsException(
          path,
          osError,
        );
      }
      return PathExistsException(
        path,
        osError,
        message!,
      );
    };
Function _PathExistsException_toString$(
  m.Scope scope$,
  PathExistsException target$,
) =>
    target$.toString;
Function PathNotFoundException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as PathNotFoundException;
Function PathNotFoundException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is PathNotFoundException;
Function _PathNotFoundException__$(m.Scope scope$) => (
      String path,
      OSError osError, [
      String? message,
    ]) {
      if (message == null) {
        return PathNotFoundException(
          path,
          osError,
        );
      }
      return PathNotFoundException(
        path,
        osError,
        message!,
      );
    };
Function _PathNotFoundException_toString$(
  m.Scope scope$,
  PathNotFoundException target$,
) =>
    target$.toString;
Function ReadPipe_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ReadPipe;
Function ReadPipe_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ReadPipe;
Function WritePipe_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as WritePipe;
Function WritePipe_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is WritePipe;
Function Pipe_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Pipe;
Function Pipe_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Pipe;
Function _Pipe_read$(
  m.Scope scope$,
  Pipe target$,
) =>
    () {
      return target$.read;
    };
Function _Pipe_write$(
  m.Scope scope$,
  Pipe target$,
) =>
    () {
      return target$.write;
    };
Function _Pipe_createSync_$(m.Scope scope$) => Pipe.createSync;
Function _Pipe_create$(m.Scope scope$) => Pipe.create;
Function FileSystemEntityType_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemEntityType;
Function FileSystemEntityType_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemEntityType;
Function _FileSystemEntityType_file$(m.Scope scope$) =>
    () => FileSystemEntityType.file;
Function _FileSystemEntityType_directory$(m.Scope scope$) =>
    () => FileSystemEntityType.directory;
Function _FileSystemEntityType_link$(m.Scope scope$) =>
    () => FileSystemEntityType.link;
Function _FileSystemEntityType_unixDomainSock$(m.Scope scope$) =>
    () => FileSystemEntityType.unixDomainSock;
Function _FileSystemEntityType_pipe$(m.Scope scope$) =>
    () => FileSystemEntityType.pipe;
Function _FileSystemEntityType_notFound$(m.Scope scope$) =>
    () => FileSystemEntityType.notFound;
Function _FileSystemEntityType_NOT_FOUND$(m.Scope scope$) =>
    () => FileSystemEntityType.NOT_FOUND;
Function _FileSystemEntityType_toString$(
  m.Scope scope$,
  FileSystemEntityType target$,
) =>
    target$.toString;
Function FileStat_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileStat;
Function FileStat_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileStat;
Function _FileStat_changed$(
  m.Scope scope$,
  FileStat target$,
) =>
    () {
      return target$.changed;
    };
Function _FileStat_modified$(
  m.Scope scope$,
  FileStat target$,
) =>
    () {
      return target$.modified;
    };
Function _FileStat_accessed$(
  m.Scope scope$,
  FileStat target$,
) =>
    () {
      return target$.accessed;
    };
Function _FileStat_type$(
  m.Scope scope$,
  FileStat target$,
) =>
    () {
      return target$.type;
    };
Function _FileStat_mode$(
  m.Scope scope$,
  FileStat target$,
) =>
    () {
      return target$.mode;
    };
Function _FileStat_size$(
  m.Scope scope$,
  FileStat target$,
) =>
    () {
      return target$.size;
    };
Function _FileStat_statSync$(m.Scope scope$) => FileStat.statSync;
Function _FileStat_stat$(m.Scope scope$) => FileStat.stat;
Function _FileStat_toString$(
  m.Scope scope$,
  FileStat target$,
) =>
    target$.toString;
Function _FileStat_modeString$(
  m.Scope scope$,
  FileStat target$,
) =>
    target$.modeString;
Function FileSystemEntity_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemEntity;
Function FileSystemEntity_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemEntity;
Function _FileSystemEntity_path$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    () {
      return target$.path;
    };
Function _FileSystemEntity_uri$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    () {
      return target$.uri;
    };
Function _FileSystemEntity_isAbsolute$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    () {
      return target$.isAbsolute;
    };
Function _FileSystemEntity_absolute$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    () {
      return target$.absolute;
    };
Function _FileSystemEntity_isWatchSupported$(m.Scope scope$) =>
    () => FileSystemEntity.isWatchSupported;
Function _FileSystemEntity_parent$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    () {
      return target$.parent;
    };
Function _FileSystemEntity_exists$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.exists;
Function _FileSystemEntity_existsSync$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.existsSync;
Function _FileSystemEntity_rename$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.rename;
Function _FileSystemEntity_renameSync$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.renameSync;
Function _FileSystemEntity_resolveSymbolicLinks$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.resolveSymbolicLinks;
Function _FileSystemEntity_resolveSymbolicLinksSync$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.resolveSymbolicLinksSync;
Function _FileSystemEntity_stat$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.stat;
Function _FileSystemEntity_statSync$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.statSync;
Function _FileSystemEntity_delete$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.delete;
Function _FileSystemEntity_deleteSync$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.deleteSync;
Function _FileSystemEntity_watch$(
  m.Scope scope$,
  FileSystemEntity target$,
) =>
    target$.watch;
Function _FileSystemEntity_identical$(m.Scope scope$) =>
    FileSystemEntity.identical;
Function _FileSystemEntity_identicalSync$(m.Scope scope$) =>
    FileSystemEntity.identicalSync;
Function _FileSystemEntity_type$(m.Scope scope$) => FileSystemEntity.type;
Function _FileSystemEntity_typeSync$(m.Scope scope$) =>
    FileSystemEntity.typeSync;
Function _FileSystemEntity_isLink$(m.Scope scope$) => FileSystemEntity.isLink;
Function _FileSystemEntity_isFile$(m.Scope scope$) => FileSystemEntity.isFile;
Function _FileSystemEntity_isDirectory$(m.Scope scope$) =>
    FileSystemEntity.isDirectory;
Function _FileSystemEntity_isLinkSync$(m.Scope scope$) =>
    FileSystemEntity.isLinkSync;
Function _FileSystemEntity_isFileSync$(m.Scope scope$) =>
    FileSystemEntity.isFileSync;
Function _FileSystemEntity_isDirectorySync$(m.Scope scope$) =>
    FileSystemEntity.isDirectorySync;
Function _FileSystemEntity_parentOf$(m.Scope scope$) =>
    FileSystemEntity.parentOf;
Function FileSystemEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemEvent;
Function FileSystemEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemEvent;
Function _FileSystemEvent_create$(m.Scope scope$) =>
    () => FileSystemEvent.create;
Function _FileSystemEvent_modify$(m.Scope scope$) =>
    () => FileSystemEvent.modify;
Function _FileSystemEvent_delete$(m.Scope scope$) =>
    () => FileSystemEvent.delete;
Function _FileSystemEvent_move$(m.Scope scope$) => () => FileSystemEvent.move;
Function _FileSystemEvent_all$(m.Scope scope$) => () => FileSystemEvent.all;
Function _FileSystemEvent_type$(
  m.Scope scope$,
  FileSystemEvent target$,
) =>
    () {
      return target$.type;
    };
Function _FileSystemEvent_path$(
  m.Scope scope$,
  FileSystemEvent target$,
) =>
    () {
      return target$.path;
    };
Function _FileSystemEvent_isDirectory$(
  m.Scope scope$,
  FileSystemEvent target$,
) =>
    () {
      return target$.isDirectory;
    };
Function FileSystemCreateEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemCreateEvent;
Function FileSystemCreateEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemCreateEvent;
Function _FileSystemCreateEvent__$(m.Scope scope$) => (
      String path,
      bool isDirectory,
    ) {
      return FileSystemCreateEvent(
        path,
        isDirectory,
      );
    };
Function _FileSystemCreateEvent_toString$(
  m.Scope scope$,
  FileSystemCreateEvent target$,
) =>
    target$.toString;
Function FileSystemModifyEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemModifyEvent;
Function FileSystemModifyEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemModifyEvent;
Function _FileSystemModifyEvent_contentChanged$(
  m.Scope scope$,
  FileSystemModifyEvent target$,
) =>
    () {
      return target$.contentChanged;
    };
Function _FileSystemModifyEvent__$(m.Scope scope$) => (
      String path,
      bool isDirectory,
      bool contentChanged,
    ) {
      return FileSystemModifyEvent(
        path,
        isDirectory,
        contentChanged,
      );
    };
Function _FileSystemModifyEvent_toString$(
  m.Scope scope$,
  FileSystemModifyEvent target$,
) =>
    target$.toString;
Function FileSystemDeleteEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemDeleteEvent;
Function FileSystemDeleteEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemDeleteEvent;
Function _FileSystemDeleteEvent__$(m.Scope scope$) => (
      String path,
      bool isDirectory,
    ) {
      return FileSystemDeleteEvent(
        path,
        isDirectory,
      );
    };
Function _FileSystemDeleteEvent_toString$(
  m.Scope scope$,
  FileSystemDeleteEvent target$,
) =>
    target$.toString;
Function FileSystemMoveEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as FileSystemMoveEvent;
Function FileSystemMoveEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is FileSystemMoveEvent;
Function _FileSystemMoveEvent_destination$(
  m.Scope scope$,
  FileSystemMoveEvent target$,
) =>
    () {
      return target$.destination;
    };
Function _FileSystemMoveEvent__$(m.Scope scope$) => (
      String path,
      bool isDirectory,
      String? destination,
    ) {
      return FileSystemMoveEvent(
        path,
        isDirectory,
        destination,
      );
    };
Function _FileSystemMoveEvent_toString$(
  m.Scope scope$,
  FileSystemMoveEvent target$,
) =>
    target$.toString;
Function IOSink_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IOSink;
Function IOSink_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IOSink;
Function _IOSink_encoding$(
  m.Scope scope$,
  IOSink target$,
) =>
    () {
      return target$.encoding;
    };
void _IOSink_encoding_set$(
  m.Scope scope$,
  IOSink target$,
) =>
    (dynamic other$) {
      target$.encoding = other$;
    };
Function _IOSink_done$(
  m.Scope scope$,
  IOSink target$,
) =>
    () {
      return target$.done;
    };
Function _IOSink__$(m.Scope scope$) => (
      StreamConsumer<List<int>> target, {
      Encoding? encoding,
    }) {
      return IOSink(
        target,
        encoding: encoding ?? utf8,
      );
    };
Function _IOSink_add$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.add;
Function _IOSink_write$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.write;
Function _IOSink_writeAll$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.writeAll;
Function _IOSink_writeln$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.writeln;
Function _IOSink_writeCharCode$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.writeCharCode;
Function _IOSink_addError$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.addError;
Function _IOSink_addStream$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.addStream;
Function _IOSink_flush$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.flush;
Function _IOSink_close$(
  m.Scope scope$,
  IOSink target$,
) =>
    target$.close;
Function Link_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Link;
Function Link_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Link;
Function _Link_absolute$(
  m.Scope scope$,
  Link target$,
) =>
    () {
      return target$.absolute;
    };
Function _Link__$(m.Scope scope$) => (String path) {
      return Link(path);
    };
Function _Link_fromRawPath_$(m.Scope scope$) => Link.fromRawPath;
Function _Link_fromUri_$(m.Scope scope$) => Link.fromUri;
Function _Link_create$(
  m.Scope scope$,
  Link target$,
) =>
    target$.create;
Function _Link_createSync$(
  m.Scope scope$,
  Link target$,
) =>
    target$.createSync;
Function _Link_updateSync$(
  m.Scope scope$,
  Link target$,
) =>
    target$.updateSync;
Function _Link_update$(
  m.Scope scope$,
  Link target$,
) =>
    target$.update;
Function _Link_resolveSymbolicLinks$(
  m.Scope scope$,
  Link target$,
) =>
    target$.resolveSymbolicLinks;
Function _Link_resolveSymbolicLinksSync$(
  m.Scope scope$,
  Link target$,
) =>
    target$.resolveSymbolicLinksSync;
Function _Link_rename$(
  m.Scope scope$,
  Link target$,
) =>
    target$.rename;
Function _Link_renameSync$(
  m.Scope scope$,
  Link target$,
) =>
    target$.renameSync;
Function _Link_target$(
  m.Scope scope$,
  Link target$,
) =>
    target$.target;
Function _Link_targetSync$(
  m.Scope scope$,
  Link target$,
) =>
    target$.targetSync;
Function IOOverrides_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as IOOverrides;
Function IOOverrides_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is IOOverrides;
Function _IOOverrides_current$(m.Scope scope$) => () => IOOverrides.current;
void _IOOverrides_global_set$(IOOverrides? other$) {
  IOOverrides.global = other$;
}

Function _IOOverrides_stdin$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    () {
      return target$.stdin;
    };
Function _IOOverrides_stdout$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    () {
      return target$.stdout;
    };
Function _IOOverrides_stderr$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    () {
      return target$.stderr;
    };
Function _IOOverrides_runZoned$(m.Scope scope$) => (
      m.FunctionPointer body, {
      m.FunctionPointer? createDirectory,
      m.FunctionPointer? getCurrentDirectory,
      m.FunctionPointer? setCurrentDirectory,
      m.FunctionPointer? getSystemTempDirectory,
      m.FunctionPointer? createFile,
      m.FunctionPointer? stat,
      m.FunctionPointer? statSync,
      m.FunctionPointer? fseIdentical,
      m.FunctionPointer? fseIdenticalSync,
      m.FunctionPointer? fseGetType,
      m.FunctionPointer? fseGetTypeSync,
      m.FunctionPointer? fsWatch,
      m.FunctionPointer? fsWatchIsSupported,
      m.FunctionPointer? createLink,
      m.FunctionPointer? socketConnect,
      m.FunctionPointer? socketStartConnect,
      m.FunctionPointer? serverSocketBind,
      m.FunctionPointer? stdin,
      m.FunctionPointer? stdout,
      m.FunctionPointer? stderr,
    }) {
      dynamic bodyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            body,
            [],
            {},
          );
      Directory createDirectoryProxy(String createDirectory_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            createDirectory!,
            [createDirectory_$p0$],
            {},
          );
      File createFileProxy(String createFile_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            createFile!,
            [createFile_$p0$],
            {},
          );
      Link createLinkProxy(String createLink_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            createLink!,
            [createLink_$p0$],
            {},
          );
      Stream<FileSystemEvent> fsWatchProxy(
        String fsWatch_$p0$,
        int fsWatch_$p1$,
        bool fsWatch_$p2$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            fsWatch!,
            [
              fsWatch_$p0$,
              fsWatch_$p1$,
              fsWatch_$p2$,
            ],
            {},
          );
      bool fsWatchIsSupportedProxy() => scope$.engine.callFunctionPointer(
            scope$,
            fsWatchIsSupported!,
            [],
            {},
          );
      Future<FileSystemEntityType> fseGetTypeProxy(
        String fseGetType_$p0$,
        bool fseGetType_$p1$,
      ) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            fseGetType!,
            [
              fseGetType_$p0$,
              fseGetType_$p1$,
            ],
            {},
          );
      FileSystemEntityType fseGetTypeSyncProxy(
        String fseGetTypeSync_$p0$,
        bool fseGetTypeSync_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            fseGetTypeSync!,
            [
              fseGetTypeSync_$p0$,
              fseGetTypeSync_$p1$,
            ],
            {},
          );
      Future<bool> fseIdenticalProxy(
        String fseIdentical_$p0$,
        String fseIdentical_$p1$,
      ) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            fseIdentical!,
            [
              fseIdentical_$p0$,
              fseIdentical_$p1$,
            ],
            {},
          );
      bool fseIdenticalSyncProxy(
        String fseIdenticalSync_$p0$,
        String fseIdenticalSync_$p1$,
      ) =>
          scope$.engine.callFunctionPointer(
            scope$,
            fseIdenticalSync!,
            [
              fseIdenticalSync_$p0$,
              fseIdenticalSync_$p1$,
            ],
            {},
          );
      Directory getCurrentDirectoryProxy() => scope$.engine.callFunctionPointer(
            scope$,
            getCurrentDirectory!,
            [],
            {},
          );
      Directory getSystemTempDirectoryProxy() =>
          scope$.engine.callFunctionPointer(
            scope$,
            getSystemTempDirectory!,
            [],
            {},
          );
      Future<ServerSocket> serverSocketBindProxy(
        dynamic serverSocketBind_$p0$,
        int serverSocketBind_$p1$, {
        int? backlog,
        bool? shared,
        bool? v6Only,
      }) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            serverSocketBind!,
            [
              serverSocketBind_$p0$,
              serverSocketBind_$p1$,
            ],
            {
              'backlog': backlog,
              'shared': shared,
              'v6Only': v6Only,
            },
          );
      void setCurrentDirectoryProxy(String setCurrentDirectory_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            setCurrentDirectory!,
            [setCurrentDirectory_$p0$],
            {},
          );
      Future<Socket> socketConnectProxy(
        dynamic socketConnect_$p0$,
        int socketConnect_$p1$, {
        dynamic? sourceAddress,
        int? sourcePort,
        Duration? timeout,
      }) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            socketConnect!,
            [
              socketConnect_$p0$,
              socketConnect_$p1$,
            ],
            {
              'sourceAddress': sourceAddress,
              'sourcePort': sourcePort,
              'timeout': timeout,
            },
          );
      Future<ConnectionTask<Socket>> socketStartConnectProxy(
        dynamic socketStartConnect_$p0$,
        int socketStartConnect_$p1$, {
        dynamic? sourceAddress,
        int? sourcePort,
      }) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            socketStartConnect!,
            [
              socketStartConnect_$p0$,
              socketStartConnect_$p1$,
            ],
            {
              'sourceAddress': sourceAddress,
              'sourcePort': sourcePort,
            },
          );
      Future<FileStat> statProxy(String stat_$p0$) async =>
          await scope$.engine.callFunctionPointerAsync(
            scope$,
            stat!,
            [stat_$p0$],
            {},
          );
      FileStat statSyncProxy(String statSync_$p0$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            statSync!,
            [statSync_$p0$],
            {},
          );
      Stdout stderrProxy() => scope$.engine.callFunctionPointer(
            scope$,
            stderr!,
            [],
            {},
          );
      Stdin stdinProxy() => scope$.engine.callFunctionPointer(
            scope$,
            stdin!,
            [],
            {},
          );
      Stdout stdoutProxy() => scope$.engine.callFunctionPointer(
            scope$,
            stdout!,
            [],
            {},
          );
      return IOOverrides.runZoned(
        bodyProxy,
        createDirectory: createDirectory == null ? null : createDirectoryProxy,
        createFile: createFile == null ? null : createFileProxy,
        createLink: createLink == null ? null : createLinkProxy,
        fsWatch: fsWatch == null ? null : fsWatchProxy,
        fsWatchIsSupported:
            fsWatchIsSupported == null ? null : fsWatchIsSupportedProxy,
        fseGetType: fseGetType == null ? null : fseGetTypeProxy,
        fseGetTypeSync: fseGetTypeSync == null ? null : fseGetTypeSyncProxy,
        fseIdentical: fseIdentical == null ? null : fseIdenticalProxy,
        fseIdenticalSync:
            fseIdenticalSync == null ? null : fseIdenticalSyncProxy,
        getCurrentDirectory:
            getCurrentDirectory == null ? null : getCurrentDirectoryProxy,
        getSystemTempDirectory:
            getSystemTempDirectory == null ? null : getSystemTempDirectoryProxy,
        serverSocketBind:
            serverSocketBind == null ? null : serverSocketBindProxy,
        setCurrentDirectory:
            setCurrentDirectory == null ? null : setCurrentDirectoryProxy,
        socketConnect: socketConnect == null ? null : socketConnectProxy,
        socketStartConnect:
            socketStartConnect == null ? null : socketStartConnectProxy,
        stat: stat == null ? null : statProxy,
        statSync: statSync == null ? null : statSyncProxy,
        stderr: stderr == null ? null : stderrProxy,
        stdin: stdin == null ? null : stdinProxy,
        stdout: stdout == null ? null : stdoutProxy,
      );
    };
Function _IOOverrides_runWithIOOverrides$(m.Scope scope$) => (
      m.FunctionPointer body,
      IOOverrides overrides,
    ) {
      dynamic bodyProxy() => scope$.engine.callFunctionPointer(
            scope$,
            body,
            [],
            {},
          );
      return IOOverrides.runWithIOOverrides(
        bodyProxy,
        overrides,
      );
    };
Function _IOOverrides_createDirectory$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.createDirectory;
Function _IOOverrides_getCurrentDirectory$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.getCurrentDirectory;
Function _IOOverrides_setCurrentDirectory$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.setCurrentDirectory;
Function _IOOverrides_getSystemTempDirectory$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.getSystemTempDirectory;
Function _IOOverrides_createFile$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.createFile;
Function _IOOverrides_stat$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.stat;
Function _IOOverrides_statSync$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.statSync;
Function _IOOverrides_fseIdentical$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.fseIdentical;
Function _IOOverrides_fseIdenticalSync$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.fseIdenticalSync;
Function _IOOverrides_fseGetType$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.fseGetType;
Function _IOOverrides_fseGetTypeSync$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.fseGetTypeSync;
Function _IOOverrides_fsWatch$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.fsWatch;
Function _IOOverrides_fsWatchIsSupported$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.fsWatchIsSupported;
Function _IOOverrides_createLink$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.createLink;
Function _IOOverrides_socketConnect$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.socketConnect;
Function _IOOverrides_socketStartConnect$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.socketStartConnect;
Function _IOOverrides_serverSocketBind$(
  m.Scope scope$,
  IOOverrides target$,
) =>
    target$.serverSocketBind;
Function Platform_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Platform;
Function Platform_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Platform;
Function _Platform_isLinux$(m.Scope scope$) => () => Platform.isLinux;
Function _Platform_isMacOS$(m.Scope scope$) => () => Platform.isMacOS;
Function _Platform_isWindows$(m.Scope scope$) => () => Platform.isWindows;
Function _Platform_isAndroid$(m.Scope scope$) => () => Platform.isAndroid;
Function _Platform_isIOS$(m.Scope scope$) => () => Platform.isIOS;
Function _Platform_isFuchsia$(m.Scope scope$) => () => Platform.isFuchsia;
Function _Platform_numberOfProcessors$(m.Scope scope$) =>
    () => Platform.numberOfProcessors;
Function _Platform_pathSeparator$(m.Scope scope$) =>
    () => Platform.pathSeparator;
Function _Platform_localeName$(m.Scope scope$) => () => Platform.localeName;
Function _Platform_operatingSystem$(m.Scope scope$) =>
    () => Platform.operatingSystem;
Function _Platform_operatingSystemVersion$(m.Scope scope$) =>
    () => Platform.operatingSystemVersion;
Function _Platform_localHostname$(m.Scope scope$) =>
    () => Platform.localHostname;
Function _Platform_environment$(m.Scope scope$) => () => Platform.environment;
Function _Platform_executable$(m.Scope scope$) => () => Platform.executable;
Function _Platform_resolvedExecutable$(m.Scope scope$) =>
    () => Platform.resolvedExecutable;
Function _Platform_script$(m.Scope scope$) => () => Platform.script;
Function _Platform_executableArguments$(m.Scope scope$) =>
    () => Platform.executableArguments;
Function _Platform_packageConfig$(m.Scope scope$) =>
    () => Platform.packageConfig;
Function _Platform_version$(m.Scope scope$) => () => Platform.version;
Function _Platform__$(m.Scope scope$) => () {
      return Platform();
    };
void _exitCode_set$(int other$) {
  exitCode = other$;
}

Function _exitCode$(m.Scope scope$) => () => exitCode;
Function _pid$(m.Scope scope$) => () => pid;
Function ProcessInfo_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProcessInfo;
Function ProcessInfo_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProcessInfo;
Function _ProcessInfo_currentRss$(m.Scope scope$) =>
    () => ProcessInfo.currentRss;
Function _ProcessInfo_maxRss$(m.Scope scope$) => () => ProcessInfo.maxRss;
Function ProcessStartMode_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProcessStartMode;
Function ProcessStartMode_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProcessStartMode;
Function _ProcessStartMode_normal$(m.Scope scope$) =>
    () => ProcessStartMode.normal;
Function _ProcessStartMode_inheritStdio$(m.Scope scope$) =>
    () => ProcessStartMode.inheritStdio;
Function _ProcessStartMode_detached$(m.Scope scope$) =>
    () => ProcessStartMode.detached;
Function _ProcessStartMode_detachedWithStdio$(m.Scope scope$) =>
    () => ProcessStartMode.detachedWithStdio;
Function _ProcessStartMode_values$(m.Scope scope$) =>
    () => ProcessStartMode.values;
Function _ProcessStartMode_toString$(
  m.Scope scope$,
  ProcessStartMode target$,
) =>
    target$.toString;
Function Process_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Process;
Function Process_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Process;
Function _Process_exitCode$(
  m.Scope scope$,
  Process target$,
) =>
    () {
      return target$.exitCode;
    };
Function _Process_stdout$(
  m.Scope scope$,
  Process target$,
) =>
    () {
      return target$.stdout;
    };
Function _Process_stderr$(
  m.Scope scope$,
  Process target$,
) =>
    () {
      return target$.stderr;
    };
Function _Process_stdin$(
  m.Scope scope$,
  Process target$,
) =>
    () {
      return target$.stdin;
    };
Function _Process_pid$(
  m.Scope scope$,
  Process target$,
) =>
    () {
      return target$.pid;
    };
Function _Process_start$(m.Scope scope$) => Process.start;
Function _Process_run$(m.Scope scope$) => Process.run;
Function _Process_runSync$(m.Scope scope$) => Process.runSync;
Function _Process_killPid$(m.Scope scope$) => Process.killPid;
Function _Process_kill$(
  m.Scope scope$,
  Process target$,
) =>
    target$.kill;
Function ProcessResult_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProcessResult;
Function ProcessResult_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProcessResult;
Function _ProcessResult_exitCode$(
  m.Scope scope$,
  ProcessResult target$,
) =>
    () {
      return target$.exitCode;
    };
Function _ProcessResult_stdout$(
  m.Scope scope$,
  ProcessResult target$,
) =>
    () {
      return target$.stdout;
    };
Function _ProcessResult_stderr$(
  m.Scope scope$,
  ProcessResult target$,
) =>
    () {
      return target$.stderr;
    };
Function _ProcessResult_pid$(
  m.Scope scope$,
  ProcessResult target$,
) =>
    () {
      return target$.pid;
    };
Function _ProcessResult__$(m.Scope scope$) => (
      int pid,
      int exitCode,
      dynamic stdout,
      dynamic stderr,
    ) {
      return ProcessResult(
        pid,
        exitCode,
        stdout,
        stderr,
      );
    };
Function ProcessSignal_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProcessSignal;
Function ProcessSignal_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProcessSignal;
Function _ProcessSignal_sighup$(m.Scope scope$) => () => ProcessSignal.sighup;
Function _ProcessSignal_sigint$(m.Scope scope$) => () => ProcessSignal.sigint;
Function _ProcessSignal_sigquit$(m.Scope scope$) => () => ProcessSignal.sigquit;
Function _ProcessSignal_sigill$(m.Scope scope$) => () => ProcessSignal.sigill;
Function _ProcessSignal_sigtrap$(m.Scope scope$) => () => ProcessSignal.sigtrap;
Function _ProcessSignal_sigabrt$(m.Scope scope$) => () => ProcessSignal.sigabrt;
Function _ProcessSignal_sigbus$(m.Scope scope$) => () => ProcessSignal.sigbus;
Function _ProcessSignal_sigfpe$(m.Scope scope$) => () => ProcessSignal.sigfpe;
Function _ProcessSignal_sigkill$(m.Scope scope$) => () => ProcessSignal.sigkill;
Function _ProcessSignal_sigusr1$(m.Scope scope$) => () => ProcessSignal.sigusr1;
Function _ProcessSignal_sigsegv$(m.Scope scope$) => () => ProcessSignal.sigsegv;
Function _ProcessSignal_sigusr2$(m.Scope scope$) => () => ProcessSignal.sigusr2;
Function _ProcessSignal_sigpipe$(m.Scope scope$) => () => ProcessSignal.sigpipe;
Function _ProcessSignal_sigalrm$(m.Scope scope$) => () => ProcessSignal.sigalrm;
Function _ProcessSignal_sigterm$(m.Scope scope$) => () => ProcessSignal.sigterm;
Function _ProcessSignal_sigchld$(m.Scope scope$) => () => ProcessSignal.sigchld;
Function _ProcessSignal_sigcont$(m.Scope scope$) => () => ProcessSignal.sigcont;
Function _ProcessSignal_sigstop$(m.Scope scope$) => () => ProcessSignal.sigstop;
Function _ProcessSignal_sigtstp$(m.Scope scope$) => () => ProcessSignal.sigtstp;
Function _ProcessSignal_sigttin$(m.Scope scope$) => () => ProcessSignal.sigttin;
Function _ProcessSignal_sigttou$(m.Scope scope$) => () => ProcessSignal.sigttou;
Function _ProcessSignal_sigurg$(m.Scope scope$) => () => ProcessSignal.sigurg;
Function _ProcessSignal_sigxcpu$(m.Scope scope$) => () => ProcessSignal.sigxcpu;
Function _ProcessSignal_sigxfsz$(m.Scope scope$) => () => ProcessSignal.sigxfsz;
Function _ProcessSignal_sigvtalrm$(m.Scope scope$) =>
    () => ProcessSignal.sigvtalrm;
Function _ProcessSignal_sigprof$(m.Scope scope$) => () => ProcessSignal.sigprof;
Function _ProcessSignal_sigwinch$(m.Scope scope$) =>
    () => ProcessSignal.sigwinch;
Function _ProcessSignal_sigpoll$(m.Scope scope$) => () => ProcessSignal.sigpoll;
Function _ProcessSignal_sigsys$(m.Scope scope$) => () => ProcessSignal.sigsys;
Function _ProcessSignal_signalNumber$(
  m.Scope scope$,
  ProcessSignal target$,
) =>
    () {
      return target$.signalNumber;
    };
Function _ProcessSignal_name$(
  m.Scope scope$,
  ProcessSignal target$,
) =>
    () {
      return target$.name;
    };
Function _ProcessSignal_toString$(
  m.Scope scope$,
  ProcessSignal target$,
) =>
    target$.toString;
Function _ProcessSignal_watch$(
  m.Scope scope$,
  ProcessSignal target$,
) =>
    target$.watch;
Function SignalException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SignalException;
Function SignalException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SignalException;
Function _SignalException_message$(
  m.Scope scope$,
  SignalException target$,
) =>
    () {
      return target$.message;
    };
Function _SignalException_osError$(
  m.Scope scope$,
  SignalException target$,
) =>
    () {
      return target$.osError;
    };
Function _SignalException__$(m.Scope scope$) => (
      String message, [
      dynamic? osError,
    ]) {
      if (osError == null) {
        return SignalException(message);
      }
      return SignalException(
        message,
        osError!,
      );
    };
Function _SignalException_toString$(
  m.Scope scope$,
  SignalException target$,
) =>
    target$.toString;
Function ProcessException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ProcessException;
Function ProcessException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ProcessException;
Function _ProcessException_executable$(
  m.Scope scope$,
  ProcessException target$,
) =>
    () {
      return target$.executable;
    };
Function _ProcessException_arguments$(
  m.Scope scope$,
  ProcessException target$,
) =>
    () {
      return target$.arguments;
    };
Function _ProcessException_message$(
  m.Scope scope$,
  ProcessException target$,
) =>
    () {
      return target$.message;
    };
Function _ProcessException_errorCode$(
  m.Scope scope$,
  ProcessException target$,
) =>
    () {
      return target$.errorCode;
    };
Function _ProcessException__$(m.Scope scope$) => (
      String executable,
      List arguments, [
      String? message,
      int? errorCode,
    ]) {
      if (message == null && errorCode == null) {
        return ProcessException(
          executable,
          List.from(arguments),
        );
      }
      if (errorCode == null) {
        return ProcessException(
          executable,
          List.from(arguments),
          message!,
        );
      }
      return ProcessException(
        executable,
        List.from(arguments),
        message!,
        errorCode!,
      );
    };
Function _ProcessException_toString$(
  m.Scope scope$,
  ProcessException target$,
) =>
    target$.toString;
Function _exit$(m.Scope scope$) => exit;
Function _sleep$(m.Scope scope$) => sleep;
Function SecureServerSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SecureServerSocket;
Function SecureServerSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SecureServerSocket;
Function _SecureServerSocket_port$(
  m.Scope scope$,
  SecureServerSocket target$,
) =>
    () {
      return target$.port;
    };
Function _SecureServerSocket_address$(
  m.Scope scope$,
  SecureServerSocket target$,
) =>
    () {
      return target$.address;
    };
Function _SecureServerSocket_bind$(m.Scope scope$) => SecureServerSocket.bind;
Function _SecureServerSocket_listen$(
  m.Scope scope$,
  SecureServerSocket target$,
) =>
    (
      m.FunctionPointer? onData, {
      Function? onError,
      m.FunctionPointer? onDone,
      bool? cancelOnError,
    }) {
      void onDataProxy(SecureSocket onData_socket$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onData!,
            [onData_socket$],
            {},
          );
      void onDoneProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDone!,
            [],
            {},
          );
      return target$.listen(
        onData == null ? null : onDataProxy,
        cancelOnError: cancelOnError,
        onDone: onDone == null ? null : onDoneProxy,
        onError: onError,
      );
    };
Function _SecureServerSocket_close$(
  m.Scope scope$,
  SecureServerSocket target$,
) =>
    target$.close;
Function RawSecureServerSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawSecureServerSocket;
Function RawSecureServerSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawSecureServerSocket;
Function _RawSecureServerSocket_requestClientCertificate$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    () {
      return target$.requestClientCertificate;
    };
Function _RawSecureServerSocket_requireClientCertificate$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    () {
      return target$.requireClientCertificate;
    };
Function _RawSecureServerSocket_supportedProtocols$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    () {
      return target$.supportedProtocols;
    };
Function _RawSecureServerSocket_port$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    () {
      return target$.port;
    };
Function _RawSecureServerSocket_address$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    () {
      return target$.address;
    };
Function _RawSecureServerSocket_bind$(m.Scope scope$) =>
    RawSecureServerSocket.bind;
Function _RawSecureServerSocket_listen$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    (
      m.FunctionPointer? onData, {
      Function? onError,
      m.FunctionPointer? onDone,
      bool? cancelOnError,
    }) {
      void onDataProxy(RawSecureSocket onData_s$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onData!,
            [onData_s$],
            {},
          );
      void onDoneProxy() => scope$.engine.callFunctionPointer(
            scope$,
            onDone!,
            [],
            {},
          );
      return target$.listen(
        onData == null ? null : onDataProxy,
        cancelOnError: cancelOnError,
        onDone: onDone == null ? null : onDoneProxy,
        onError: onError,
      );
    };
Function _RawSecureServerSocket_close$(
  m.Scope scope$,
  RawSecureServerSocket target$,
) =>
    target$.close;
Function SecureSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SecureSocket;
Function SecureSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SecureSocket;
Function _SecureSocket_peerCertificate$(
  m.Scope scope$,
  SecureSocket target$,
) =>
    () {
      return target$.peerCertificate;
    };
Function _SecureSocket_selectedProtocol$(
  m.Scope scope$,
  SecureSocket target$,
) =>
    () {
      return target$.selectedProtocol;
    };
Function _SecureSocket_connect$(m.Scope scope$) => (
      dynamic host,
      int port, {
      SecurityContext? context,
      m.FunctionPointer? onBadCertificate,
      m.FunctionPointer? keyLog,
      List? supportedProtocols,
      Duration? timeout,
    }) {
      void keyLogProxy(String keyLog_line$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            keyLog!,
            [keyLog_line$],
            {},
          );
      bool onBadCertificateProxy(
              X509Certificate onBadCertificate_certificate$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onBadCertificate!,
            [onBadCertificate_certificate$],
            {},
          );
      return SecureSocket.connect(
        host,
        port,
        context: context,
        keyLog: keyLog == null ? null : keyLogProxy,
        onBadCertificate:
            onBadCertificate == null ? null : onBadCertificateProxy,
        supportedProtocols:
            supportedProtocols == null ? null : List.from(supportedProtocols),
        timeout: timeout,
      );
    };
Function _SecureSocket_startConnect$(m.Scope scope$) => (
      dynamic host,
      int port, {
      SecurityContext? context,
      m.FunctionPointer? onBadCertificate,
      m.FunctionPointer? keyLog,
      List? supportedProtocols,
    }) {
      void keyLogProxy(String keyLog_line$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            keyLog!,
            [keyLog_line$],
            {},
          );
      bool onBadCertificateProxy(
              X509Certificate onBadCertificate_certificate$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onBadCertificate!,
            [onBadCertificate_certificate$],
            {},
          );
      return SecureSocket.startConnect(
        host,
        port,
        context: context,
        keyLog: keyLog == null ? null : keyLogProxy,
        onBadCertificate:
            onBadCertificate == null ? null : onBadCertificateProxy,
        supportedProtocols:
            supportedProtocols == null ? null : List.from(supportedProtocols),
      );
    };
Function _SecureSocket_secure$(m.Scope scope$) => (
      Socket socket, {
      dynamic? host,
      SecurityContext? context,
      m.FunctionPointer? onBadCertificate,
      m.FunctionPointer? keyLog,
      List? supportedProtocols,
    }) {
      void keyLogProxy(String keyLog_line$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            keyLog!,
            [keyLog_line$],
            {},
          );
      bool onBadCertificateProxy(
              X509Certificate onBadCertificate_certificate$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onBadCertificate!,
            [onBadCertificate_certificate$],
            {},
          );
      return SecureSocket.secure(
        socket,
        context: context,
        host: host,
        keyLog: keyLog == null ? null : keyLogProxy,
        onBadCertificate:
            onBadCertificate == null ? null : onBadCertificateProxy,
        supportedProtocols:
            supportedProtocols == null ? null : List.from(supportedProtocols),
      );
    };
Function _SecureSocket_secureServer$(m.Scope scope$) =>
    SecureSocket.secureServer;
Function RawSecureSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawSecureSocket;
Function RawSecureSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawSecureSocket;
Function _RawSecureSocket_peerCertificate$(
  m.Scope scope$,
  RawSecureSocket target$,
) =>
    () {
      return target$.peerCertificate;
    };
Function _RawSecureSocket_selectedProtocol$(
  m.Scope scope$,
  RawSecureSocket target$,
) =>
    () {
      return target$.selectedProtocol;
    };
Function _RawSecureSocket_connect$(m.Scope scope$) => (
      dynamic host,
      int port, {
      SecurityContext? context,
      m.FunctionPointer? onBadCertificate,
      m.FunctionPointer? keyLog,
      List? supportedProtocols,
      Duration? timeout,
    }) {
      void keyLogProxy(String keyLog_line$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            keyLog!,
            [keyLog_line$],
            {},
          );
      bool onBadCertificateProxy(
              X509Certificate onBadCertificate_certificate$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onBadCertificate!,
            [onBadCertificate_certificate$],
            {},
          );
      return RawSecureSocket.connect(
        host,
        port,
        context: context,
        keyLog: keyLog == null ? null : keyLogProxy,
        onBadCertificate:
            onBadCertificate == null ? null : onBadCertificateProxy,
        supportedProtocols:
            supportedProtocols == null ? null : List.from(supportedProtocols),
        timeout: timeout,
      );
    };
Function _RawSecureSocket_startConnect$(m.Scope scope$) => (
      dynamic host,
      int port, {
      SecurityContext? context,
      m.FunctionPointer? onBadCertificate,
      m.FunctionPointer? keyLog,
      List? supportedProtocols,
    }) {
      void keyLogProxy(String keyLog_line$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            keyLog!,
            [keyLog_line$],
            {},
          );
      bool onBadCertificateProxy(
              X509Certificate onBadCertificate_certificate$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onBadCertificate!,
            [onBadCertificate_certificate$],
            {},
          );
      return RawSecureSocket.startConnect(
        host,
        port,
        context: context,
        keyLog: keyLog == null ? null : keyLogProxy,
        onBadCertificate:
            onBadCertificate == null ? null : onBadCertificateProxy,
        supportedProtocols:
            supportedProtocols == null ? null : List.from(supportedProtocols),
      );
    };
Function _RawSecureSocket_secure$(m.Scope scope$) => (
      RawSocket socket, {
      StreamSubscription<RawSocketEvent>? subscription,
      dynamic? host,
      SecurityContext? context,
      m.FunctionPointer? onBadCertificate,
      m.FunctionPointer? keyLog,
      List? supportedProtocols,
    }) {
      void keyLogProxy(String keyLog_line$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            keyLog!,
            [keyLog_line$],
            {},
          );
      bool onBadCertificateProxy(
              X509Certificate onBadCertificate_certificate$) =>
          scope$.engine.callFunctionPointer(
            scope$,
            onBadCertificate!,
            [onBadCertificate_certificate$],
            {},
          );
      return RawSecureSocket.secure(
        socket,
        context: context,
        host: host,
        keyLog: keyLog == null ? null : keyLogProxy,
        onBadCertificate:
            onBadCertificate == null ? null : onBadCertificateProxy,
        subscription: subscription,
        supportedProtocols:
            supportedProtocols == null ? null : List.from(supportedProtocols),
      );
    };
Function _RawSecureSocket_secureServer$(m.Scope scope$) =>
    RawSecureSocket.secureServer;
Function X509Certificate_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as X509Certificate;
Function X509Certificate_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is X509Certificate;
Function _X509Certificate_der$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.der;
    };
Function _X509Certificate_pem$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.pem;
    };
Function _X509Certificate_sha1$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.sha1;
    };
Function _X509Certificate_subject$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.subject;
    };
Function _X509Certificate_issuer$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.issuer;
    };
Function _X509Certificate_startValidity$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.startValidity;
    };
Function _X509Certificate_endValidity$(
  m.Scope scope$,
  X509Certificate target$,
) =>
    () {
      return target$.endValidity;
    };
Function TlsException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as TlsException;
Function TlsException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is TlsException;
Function _TlsException_type$(
  m.Scope scope$,
  TlsException target$,
) =>
    () {
      return target$.type;
    };
Function _TlsException_message$(
  m.Scope scope$,
  TlsException target$,
) =>
    () {
      return target$.message;
    };
Function _TlsException_osError$(
  m.Scope scope$,
  TlsException target$,
) =>
    () {
      return target$.osError;
    };
Function _TlsException__$(m.Scope scope$) => ([
      String? message,
      OSError? osError,
    ]) {
      if (message == null && osError == null) {
        return TlsException();
      }
      if (osError == null) {
        return TlsException(message!);
      }
      return TlsException(
        message!,
        osError!,
      );
    };
Function _TlsException_toString$(
  m.Scope scope$,
  TlsException target$,
) =>
    target$.toString;
Function HandshakeException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as HandshakeException;
Function HandshakeException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is HandshakeException;
Function _HandshakeException__$(m.Scope scope$) => ([
      String? message,
      OSError? osError,
    ]) {
      if (message == null && osError == null) {
        return HandshakeException();
      }
      if (osError == null) {
        return HandshakeException(message!);
      }
      return HandshakeException(
        message!,
        osError!,
      );
    };
Function CertificateException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as CertificateException;
Function CertificateException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is CertificateException;
Function _CertificateException__$(m.Scope scope$) => ([
      String? message,
      OSError? osError,
    ]) {
      if (message == null && osError == null) {
        return CertificateException();
      }
      if (osError == null) {
        return CertificateException(message!);
      }
      return CertificateException(
        message!,
        osError!,
      );
    };
Function SecurityContext_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SecurityContext;
Function SecurityContext_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SecurityContext;
Function _SecurityContext_allowLegacyUnsafeRenegotiation$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    () {
      return target$.allowLegacyUnsafeRenegotiation;
    };
void _SecurityContext_allowLegacyUnsafeRenegotiation_set$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    (dynamic other$) {
      target$.allowLegacyUnsafeRenegotiation = other$;
    };
Function _SecurityContext_defaultContext$(m.Scope scope$) =>
    () => SecurityContext.defaultContext;
Function _SecurityContext__$(m.Scope scope$) => ({bool? withTrustedRoots}) {
      return SecurityContext(withTrustedRoots: withTrustedRoots ?? false);
    };
Function _SecurityContext_usePrivateKey$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.usePrivateKey;
Function _SecurityContext_usePrivateKeyBytes$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.usePrivateKeyBytes;
Function _SecurityContext_setTrustedCertificates$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.setTrustedCertificates;
Function _SecurityContext_setTrustedCertificatesBytes$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.setTrustedCertificatesBytes;
Function _SecurityContext_useCertificateChain$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.useCertificateChain;
Function _SecurityContext_useCertificateChainBytes$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.useCertificateChainBytes;
Function _SecurityContext_setClientAuthorities$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.setClientAuthorities;
Function _SecurityContext_setClientAuthoritiesBytes$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.setClientAuthoritiesBytes;
Function _SecurityContext_setAlpnProtocols$(
  m.Scope scope$,
  SecurityContext target$,
) =>
    target$.setAlpnProtocols;
Function InternetAddressType_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InternetAddressType;
Function InternetAddressType_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InternetAddressType;
Function _InternetAddressType_IPv4$(m.Scope scope$) =>
    () => InternetAddressType.IPv4;
Function _InternetAddressType_IPv6$(m.Scope scope$) =>
    () => InternetAddressType.IPv6;
Function _InternetAddressType_unix$(m.Scope scope$) =>
    () => InternetAddressType.unix;
Function _InternetAddressType_any$(m.Scope scope$) =>
    () => InternetAddressType.any;
Function _InternetAddressType_name$(
  m.Scope scope$,
  InternetAddressType target$,
) =>
    () {
      return target$.name;
    };
Function _InternetAddressType_toString$(
  m.Scope scope$,
  InternetAddressType target$,
) =>
    target$.toString;
Function InternetAddress_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as InternetAddress;
Function InternetAddress_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is InternetAddress;
Function _InternetAddress_loopbackIPv4$(m.Scope scope$) =>
    () => InternetAddress.loopbackIPv4;
Function _InternetAddress_loopbackIPv6$(m.Scope scope$) =>
    () => InternetAddress.loopbackIPv6;
Function _InternetAddress_anyIPv4$(m.Scope scope$) =>
    () => InternetAddress.anyIPv4;
Function _InternetAddress_anyIPv6$(m.Scope scope$) =>
    () => InternetAddress.anyIPv6;
Function _InternetAddress_type$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.type;
    };
Function _InternetAddress_address$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.address;
    };
Function _InternetAddress_host$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.host;
    };
Function _InternetAddress_rawAddress$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.rawAddress;
    };
Function _InternetAddress_isLoopback$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.isLoopback;
    };
Function _InternetAddress_isLinkLocal$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.isLinkLocal;
    };
Function _InternetAddress_isMulticast$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    () {
      return target$.isMulticast;
    };
Function _InternetAddress__$(m.Scope scope$) => (
      String address, {
      InternetAddressType? type,
    }) {
      return InternetAddress(
        address,
        type: type,
      );
    };
Function _InternetAddress_fromRawAddress_$(m.Scope scope$) =>
    InternetAddress.fromRawAddress;
Function _InternetAddress_reverse$(
  m.Scope scope$,
  InternetAddress target$,
) =>
    target$.reverse;
Function _InternetAddress_lookup$(m.Scope scope$) => InternetAddress.lookup;
Function _InternetAddress_tryParse$(m.Scope scope$) => InternetAddress.tryParse;
Function NetworkInterface_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as NetworkInterface;
Function NetworkInterface_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is NetworkInterface;
Function _NetworkInterface_name$(
  m.Scope scope$,
  NetworkInterface target$,
) =>
    () {
      return target$.name;
    };
Function _NetworkInterface_index$(
  m.Scope scope$,
  NetworkInterface target$,
) =>
    () {
      return target$.index;
    };
Function _NetworkInterface_addresses$(
  m.Scope scope$,
  NetworkInterface target$,
) =>
    () {
      return target$.addresses;
    };
Function _NetworkInterface_list$(m.Scope scope$) => NetworkInterface.list;
Function RawServerSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawServerSocket;
Function RawServerSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawServerSocket;
Function _RawServerSocket_port$(
  m.Scope scope$,
  RawServerSocket target$,
) =>
    () {
      return target$.port;
    };
Function _RawServerSocket_address$(
  m.Scope scope$,
  RawServerSocket target$,
) =>
    () {
      return target$.address;
    };
Function _RawServerSocket_bind$(m.Scope scope$) => RawServerSocket.bind;
Function _RawServerSocket_close$(
  m.Scope scope$,
  RawServerSocket target$,
) =>
    target$.close;
Function ServerSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ServerSocket;
Function ServerSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ServerSocket;
Function _ServerSocket_port$(
  m.Scope scope$,
  ServerSocket target$,
) =>
    () {
      return target$.port;
    };
Function _ServerSocket_address$(
  m.Scope scope$,
  ServerSocket target$,
) =>
    () {
      return target$.address;
    };
Function _ServerSocket_bind$(m.Scope scope$) => ServerSocket.bind;
Function _ServerSocket_close$(
  m.Scope scope$,
  ServerSocket target$,
) =>
    target$.close;
Function SocketDirection_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SocketDirection;
Function SocketDirection_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SocketDirection;
Function _SocketDirection_receive$(m.Scope scope$) =>
    () => SocketDirection.receive;
Function _SocketDirection_send$(m.Scope scope$) => () => SocketDirection.send;
Function _SocketDirection_both$(m.Scope scope$) => () => SocketDirection.both;
Function SocketOption_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SocketOption;
Function SocketOption_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SocketOption;
Function _SocketOption_tcpNoDelay$(m.Scope scope$) =>
    () => SocketOption.tcpNoDelay;
Function RawSocketOption_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawSocketOption;
Function RawSocketOption_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawSocketOption;
Function _RawSocketOption_level$(
  m.Scope scope$,
  RawSocketOption target$,
) =>
    () {
      return target$.level;
    };
Function _RawSocketOption_option$(
  m.Scope scope$,
  RawSocketOption target$,
) =>
    () {
      return target$.option;
    };
Function _RawSocketOption_value$(
  m.Scope scope$,
  RawSocketOption target$,
) =>
    () {
      return target$.value;
    };
Function _RawSocketOption_levelSocket$(m.Scope scope$) =>
    () => RawSocketOption.levelSocket;
Function _RawSocketOption_levelIPv4$(m.Scope scope$) =>
    () => RawSocketOption.levelIPv4;
Function _RawSocketOption_IPv4MulticastInterface$(m.Scope scope$) =>
    () => RawSocketOption.IPv4MulticastInterface;
Function _RawSocketOption_levelIPv6$(m.Scope scope$) =>
    () => RawSocketOption.levelIPv6;
Function _RawSocketOption_IPv6MulticastInterface$(m.Scope scope$) =>
    () => RawSocketOption.IPv6MulticastInterface;
Function _RawSocketOption_levelTcp$(m.Scope scope$) =>
    () => RawSocketOption.levelTcp;
Function _RawSocketOption_levelUdp$(m.Scope scope$) =>
    () => RawSocketOption.levelUdp;
Function _RawSocketOption__$(m.Scope scope$) => (
      int level,
      int option,
      Uint8List value,
    ) {
      return RawSocketOption(
        level,
        option,
        value,
      );
    };
Function _RawSocketOption_fromInt_$(m.Scope scope$) => RawSocketOption.fromInt;
Function _RawSocketOption_fromBool_$(m.Scope scope$) =>
    RawSocketOption.fromBool;
Function RawSocketEvent_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawSocketEvent;
Function RawSocketEvent_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawSocketEvent;
Function _RawSocketEvent_read$(m.Scope scope$) => () => RawSocketEvent.read;
Function _RawSocketEvent_write$(m.Scope scope$) => () => RawSocketEvent.write;
Function _RawSocketEvent_readClosed$(m.Scope scope$) =>
    () => RawSocketEvent.readClosed;
Function _RawSocketEvent_closed$(m.Scope scope$) => () => RawSocketEvent.closed;
Function _RawSocketEvent_toString$(
  m.Scope scope$,
  RawSocketEvent target$,
) =>
    target$.toString;
Function ConnectionTask_as$<S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ConnectionTask<S>;
Function ConnectionTask_is$<S>(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ConnectionTask<S>;
Function _ConnectionTask_socket$<S>(
  m.Scope scope$,
  ConnectionTask<S> target$,
) =>
    () {
      return target$.socket;
    };
Function _ConnectionTask_cancel$<S>(
  m.Scope scope$,
  ConnectionTask<S> target$,
) =>
    target$.cancel;
Function RawSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawSocket;
Function RawSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawSocket;
Function _RawSocket_readEventsEnabled$(
  m.Scope scope$,
  RawSocket target$,
) =>
    () {
      return target$.readEventsEnabled;
    };
void _RawSocket_readEventsEnabled_set$(
  m.Scope scope$,
  RawSocket target$,
) =>
    (dynamic other$) {
      target$.readEventsEnabled = other$;
    };
Function _RawSocket_writeEventsEnabled$(
  m.Scope scope$,
  RawSocket target$,
) =>
    () {
      return target$.writeEventsEnabled;
    };
void _RawSocket_writeEventsEnabled_set$(
  m.Scope scope$,
  RawSocket target$,
) =>
    (dynamic other$) {
      target$.writeEventsEnabled = other$;
    };
Function _RawSocket_port$(
  m.Scope scope$,
  RawSocket target$,
) =>
    () {
      return target$.port;
    };
Function _RawSocket_remotePort$(
  m.Scope scope$,
  RawSocket target$,
) =>
    () {
      return target$.remotePort;
    };
Function _RawSocket_address$(
  m.Scope scope$,
  RawSocket target$,
) =>
    () {
      return target$.address;
    };
Function _RawSocket_remoteAddress$(
  m.Scope scope$,
  RawSocket target$,
) =>
    () {
      return target$.remoteAddress;
    };
Function _RawSocket_connect$(m.Scope scope$) => RawSocket.connect;
Function _RawSocket_startConnect$(m.Scope scope$) => RawSocket.startConnect;
Function _RawSocket_available$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.available;
Function _RawSocket_read$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.read;
Function _RawSocket_readMessage$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.readMessage;
Function _RawSocket_write$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.write;
Function _RawSocket_sendMessage$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.sendMessage;
Function _RawSocket_close$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.close;
Function _RawSocket_shutdown$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.shutdown;
Function _RawSocket_setOption$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.setOption;
Function _RawSocket_getRawOption$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.getRawOption;
Function _RawSocket_setRawOption$(
  m.Scope scope$,
  RawSocket target$,
) =>
    target$.setRawOption;
Function Socket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Socket;
Function Socket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Socket;
Function _Socket_port$(
  m.Scope scope$,
  Socket target$,
) =>
    () {
      return target$.port;
    };
Function _Socket_remotePort$(
  m.Scope scope$,
  Socket target$,
) =>
    () {
      return target$.remotePort;
    };
Function _Socket_address$(
  m.Scope scope$,
  Socket target$,
) =>
    () {
      return target$.address;
    };
Function _Socket_remoteAddress$(
  m.Scope scope$,
  Socket target$,
) =>
    () {
      return target$.remoteAddress;
    };
Function _Socket_done$(
  m.Scope scope$,
  Socket target$,
) =>
    () {
      return target$.done;
    };
Function _Socket_connect$(m.Scope scope$) => Socket.connect;
Function _Socket_startConnect$(m.Scope scope$) => Socket.startConnect;
Function _Socket_destroy$(
  m.Scope scope$,
  Socket target$,
) =>
    target$.destroy;
Function _Socket_setOption$(
  m.Scope scope$,
  Socket target$,
) =>
    target$.setOption;
Function _Socket_getRawOption$(
  m.Scope scope$,
  Socket target$,
) =>
    target$.getRawOption;
Function _Socket_setRawOption$(
  m.Scope scope$,
  Socket target$,
) =>
    target$.setRawOption;
Function _Socket_close$(
  m.Scope scope$,
  Socket target$,
) =>
    target$.close;
Function Datagram_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Datagram;
Function Datagram_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Datagram;
Function _Datagram_data$(
  m.Scope scope$,
  Datagram target$,
) =>
    () {
      return target$.data;
    };
void _Datagram_data_set$(
  m.Scope scope$,
  Datagram target$,
) =>
    (dynamic other$) {
      target$.data = other$;
    };
Function _Datagram_address$(
  m.Scope scope$,
  Datagram target$,
) =>
    () {
      return target$.address;
    };
void _Datagram_address_set$(
  m.Scope scope$,
  Datagram target$,
) =>
    (dynamic other$) {
      target$.address = other$;
    };
Function _Datagram_port$(
  m.Scope scope$,
  Datagram target$,
) =>
    () {
      return target$.port;
    };
void _Datagram_port_set$(
  m.Scope scope$,
  Datagram target$,
) =>
    (dynamic other$) {
      target$.port = other$;
    };
Function _Datagram__$(m.Scope scope$) => (
      Uint8List data,
      InternetAddress address,
      int port,
    ) {
      return Datagram(
        data,
        address,
        port,
      );
    };
Function ResourceHandle_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as ResourceHandle;
Function ResourceHandle_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is ResourceHandle;
Function _ResourceHandle_fromFile_$(m.Scope scope$) => ResourceHandle.fromFile;
Function _ResourceHandle_fromSocket_$(m.Scope scope$) =>
    ResourceHandle.fromSocket;
Function _ResourceHandle_fromRawSocket_$(m.Scope scope$) =>
    ResourceHandle.fromRawSocket;
Function _ResourceHandle_fromRawDatagramSocket_$(m.Scope scope$) =>
    ResourceHandle.fromRawDatagramSocket;
Function _ResourceHandle_fromStdin_$(m.Scope scope$) =>
    ResourceHandle.fromStdin;
Function _ResourceHandle_fromStdout_$(m.Scope scope$) =>
    ResourceHandle.fromStdout;
Function _ResourceHandle_fromReadPipe_$(m.Scope scope$) =>
    ResourceHandle.fromReadPipe;
Function _ResourceHandle_fromWritePipe_$(m.Scope scope$) =>
    ResourceHandle.fromWritePipe;
Function _ResourceHandle_toFile$(
  m.Scope scope$,
  ResourceHandle target$,
) =>
    target$.toFile;
Function _ResourceHandle_toSocket$(
  m.Scope scope$,
  ResourceHandle target$,
) =>
    target$.toSocket;
Function _ResourceHandle_toRawSocket$(
  m.Scope scope$,
  ResourceHandle target$,
) =>
    target$.toRawSocket;
Function _ResourceHandle_toRawDatagramSocket$(
  m.Scope scope$,
  ResourceHandle target$,
) =>
    target$.toRawDatagramSocket;
Function _ResourceHandle_toReadPipe$(
  m.Scope scope$,
  ResourceHandle target$,
) =>
    target$.toReadPipe;
Function _ResourceHandle_toWritePipe$(
  m.Scope scope$,
  ResourceHandle target$,
) =>
    target$.toWritePipe;
Function SocketControlMessage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SocketControlMessage;
Function SocketControlMessage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SocketControlMessage;
Function _SocketControlMessage_level$(
  m.Scope scope$,
  SocketControlMessage target$,
) =>
    () {
      return target$.level;
    };
Function _SocketControlMessage_type$(
  m.Scope scope$,
  SocketControlMessage target$,
) =>
    () {
      return target$.type;
    };
Function _SocketControlMessage_data$(
  m.Scope scope$,
  SocketControlMessage target$,
) =>
    () {
      return target$.data;
    };
Function _SocketControlMessage_fromHandles_$(m.Scope scope$) =>
    SocketControlMessage.fromHandles;
Function _SocketControlMessage_extractHandles$(
  m.Scope scope$,
  SocketControlMessage target$,
) =>
    target$.extractHandles;
Function SocketMessage_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SocketMessage;
Function SocketMessage_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SocketMessage;
Function _SocketMessage_data$(
  m.Scope scope$,
  SocketMessage target$,
) =>
    () {
      return target$.data;
    };
Function _SocketMessage_controlMessages$(
  m.Scope scope$,
  SocketMessage target$,
) =>
    () {
      return target$.controlMessages;
    };
Function _SocketMessage__$(m.Scope scope$) => (
      Uint8List data,
      List controlMessages,
    ) {
      return SocketMessage(
        data,
        List.from(controlMessages),
      );
    };
Function RawDatagramSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawDatagramSocket;
Function RawDatagramSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawDatagramSocket;
Function _RawDatagramSocket_readEventsEnabled$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.readEventsEnabled;
    };
void _RawDatagramSocket_readEventsEnabled_set$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    (dynamic other$) {
      target$.readEventsEnabled = other$;
    };
Function _RawDatagramSocket_writeEventsEnabled$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.writeEventsEnabled;
    };
void _RawDatagramSocket_writeEventsEnabled_set$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    (dynamic other$) {
      target$.writeEventsEnabled = other$;
    };
Function _RawDatagramSocket_multicastLoopback$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.multicastLoopback;
    };
void _RawDatagramSocket_multicastLoopback_set$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    (dynamic other$) {
      target$.multicastLoopback = other$;
    };
Function _RawDatagramSocket_multicastHops$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.multicastHops;
    };
void _RawDatagramSocket_multicastHops_set$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    (dynamic other$) {
      target$.multicastHops = other$;
    };
Function _RawDatagramSocket_multicastInterface$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.multicastInterface;
    };
void _RawDatagramSocket_multicastInterface_set$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    (dynamic other$) {
      target$.multicastInterface = other$;
    };
Function _RawDatagramSocket_broadcastEnabled$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.broadcastEnabled;
    };
void _RawDatagramSocket_broadcastEnabled_set$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    (dynamic other$) {
      target$.broadcastEnabled = other$;
    };
Function _RawDatagramSocket_port$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.port;
    };
Function _RawDatagramSocket_address$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    () {
      return target$.address;
    };
Function _RawDatagramSocket_bind$(m.Scope scope$) => RawDatagramSocket.bind;
Function _RawDatagramSocket_close$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.close;
Function _RawDatagramSocket_send$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.send;
Function _RawDatagramSocket_receive$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.receive;
Function _RawDatagramSocket_joinMulticast$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.joinMulticast;
Function _RawDatagramSocket_leaveMulticast$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.leaveMulticast;
Function _RawDatagramSocket_getRawOption$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.getRawOption;
Function _RawDatagramSocket_setRawOption$(
  m.Scope scope$,
  RawDatagramSocket target$,
) =>
    target$.setRawOption;
Function SocketException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SocketException;
Function SocketException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SocketException;
Function _SocketException_message$(
  m.Scope scope$,
  SocketException target$,
) =>
    () {
      return target$.message;
    };
Function _SocketException_osError$(
  m.Scope scope$,
  SocketException target$,
) =>
    () {
      return target$.osError;
    };
Function _SocketException_address$(
  m.Scope scope$,
  SocketException target$,
) =>
    () {
      return target$.address;
    };
Function _SocketException_port$(
  m.Scope scope$,
  SocketException target$,
) =>
    () {
      return target$.port;
    };
Function _SocketException__$(m.Scope scope$) => (
      String message, {
      OSError? osError,
      InternetAddress? address,
      int? port,
    }) {
      return SocketException(
        message,
        address: address,
        osError: osError,
        port: port,
      );
    };
Function _SocketException_closed_$(m.Scope scope$) => SocketException.closed;
Function _SocketException_toString$(
  m.Scope scope$,
  SocketException target$,
) =>
    target$.toString;
Function _stdin$(m.Scope scope$) => () => stdin;
Function _stdout$(m.Scope scope$) => () => stdout;
Function _stderr$(m.Scope scope$) => () => stderr;
Function Stdin_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Stdin;
Function Stdin_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Stdin;
Function _Stdin_echoMode$(
  m.Scope scope$,
  Stdin target$,
) =>
    () {
      return target$.echoMode;
    };
void _Stdin_echoMode_set$(
  m.Scope scope$,
  Stdin target$,
) =>
    (dynamic other$) {
      target$.echoMode = other$;
    };
Function _Stdin_echoNewlineMode$(
  m.Scope scope$,
  Stdin target$,
) =>
    () {
      return target$.echoNewlineMode;
    };
void _Stdin_echoNewlineMode_set$(
  m.Scope scope$,
  Stdin target$,
) =>
    (dynamic other$) {
      target$.echoNewlineMode = other$;
    };
Function _Stdin_lineMode$(
  m.Scope scope$,
  Stdin target$,
) =>
    () {
      return target$.lineMode;
    };
void _Stdin_lineMode_set$(
  m.Scope scope$,
  Stdin target$,
) =>
    (dynamic other$) {
      target$.lineMode = other$;
    };
Function _Stdin_supportsAnsiEscapes$(
  m.Scope scope$,
  Stdin target$,
) =>
    () {
      return target$.supportsAnsiEscapes;
    };
Function _Stdin_hasTerminal$(
  m.Scope scope$,
  Stdin target$,
) =>
    () {
      return target$.hasTerminal;
    };
Function _Stdin_readLineSync$(
  m.Scope scope$,
  Stdin target$,
) =>
    target$.readLineSync;
Function _Stdin_readByteSync$(
  m.Scope scope$,
  Stdin target$,
) =>
    target$.readByteSync;
Function Stdout_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as Stdout;
Function Stdout_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is Stdout;
Function _Stdout_hasTerminal$(
  m.Scope scope$,
  Stdout target$,
) =>
    () {
      return target$.hasTerminal;
    };
Function _Stdout_terminalColumns$(
  m.Scope scope$,
  Stdout target$,
) =>
    () {
      return target$.terminalColumns;
    };
Function _Stdout_terminalLines$(
  m.Scope scope$,
  Stdout target$,
) =>
    () {
      return target$.terminalLines;
    };
Function _Stdout_supportsAnsiEscapes$(
  m.Scope scope$,
  Stdout target$,
) =>
    () {
      return target$.supportsAnsiEscapes;
    };
Function _Stdout_nonBlocking$(
  m.Scope scope$,
  Stdout target$,
) =>
    () {
      return target$.nonBlocking;
    };
Function StdoutException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StdoutException;
Function StdoutException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StdoutException;
Function _StdoutException_message$(
  m.Scope scope$,
  StdoutException target$,
) =>
    () {
      return target$.message;
    };
Function _StdoutException_osError$(
  m.Scope scope$,
  StdoutException target$,
) =>
    () {
      return target$.osError;
    };
Function _StdoutException__$(m.Scope scope$) => (
      String message, [
      OSError? osError,
    ]) {
      if (osError == null) {
        return StdoutException(message);
      }
      return StdoutException(
        message,
        osError!,
      );
    };
Function _StdoutException_toString$(
  m.Scope scope$,
  StdoutException target$,
) =>
    target$.toString;
Function StdinException_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StdinException;
Function StdinException_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StdinException;
Function _StdinException_message$(
  m.Scope scope$,
  StdinException target$,
) =>
    () {
      return target$.message;
    };
Function _StdinException_osError$(
  m.Scope scope$,
  StdinException target$,
) =>
    () {
      return target$.osError;
    };
Function _StdinException__$(m.Scope scope$) => (
      String message, [
      OSError? osError,
    ]) {
      if (osError == null) {
        return StdinException(message);
      }
      return StdinException(
        message,
        osError!,
      );
    };
Function _StdinException_toString$(
  m.Scope scope$,
  StdinException target$,
) =>
    target$.toString;
Function StdioType_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as StdioType;
Function StdioType_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is StdioType;
Function _StdioType_terminal$(m.Scope scope$) => () => StdioType.terminal;
Function _StdioType_pipe$(m.Scope scope$) => () => StdioType.pipe;
Function _StdioType_file$(m.Scope scope$) => () => StdioType.file;
Function _StdioType_other$(m.Scope scope$) => () => StdioType.other;
Function _StdioType_name$(
  m.Scope scope$,
  StdioType target$,
) =>
    () {
      return target$.name;
    };
Function _StdioType_toString$(
  m.Scope scope$,
  StdioType target$,
) =>
    target$.toString;
Function _stdioType$(m.Scope scope$) => stdioType;
Function _systemEncoding$(m.Scope scope$) => () => systemEncoding;
Function SystemEncoding_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as SystemEncoding;
Function SystemEncoding_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is SystemEncoding;
Function _SystemEncoding_name$(
  m.Scope scope$,
  SystemEncoding target$,
) =>
    () {
      return target$.name;
    };
Function _SystemEncoding_encoder$(
  m.Scope scope$,
  SystemEncoding target$,
) =>
    () {
      return target$.encoder;
    };
Function _SystemEncoding_decoder$(
  m.Scope scope$,
  SystemEncoding target$,
) =>
    () {
      return target$.decoder;
    };
Function _SystemEncoding__$(m.Scope scope$) => () {
      return SystemEncoding();
    };
Function _SystemEncoding_encode$(
  m.Scope scope$,
  SystemEncoding target$,
) =>
    target$.encode;
Function _SystemEncoding_decode$(
  m.Scope scope$,
  SystemEncoding target$,
) =>
    target$.decode;
Function RawSynchronousSocket_as$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ as RawSynchronousSocket;
Function RawSynchronousSocket_is$(
  m.Scope scope$,
  dynamic target$,
) =>
    () => target$ is RawSynchronousSocket;
Function _RawSynchronousSocket_port$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    () {
      return target$.port;
    };
Function _RawSynchronousSocket_remotePort$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    () {
      return target$.remotePort;
    };
Function _RawSynchronousSocket_address$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    () {
      return target$.address;
    };
Function _RawSynchronousSocket_remoteAddress$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    () {
      return target$.remoteAddress;
    };
Function _RawSynchronousSocket_connectSync$(m.Scope scope$) =>
    RawSynchronousSocket.connectSync;
Function _RawSynchronousSocket_available$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    target$.available;
Function _RawSynchronousSocket_closeSync$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    target$.closeSync;
Function _RawSynchronousSocket_readIntoSync$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    target$.readIntoSync;
Function _RawSynchronousSocket_readSync$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    target$.readSync;
Function _RawSynchronousSocket_shutdown$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    target$.shutdown;
Function _RawSynchronousSocket_writeFromSync$(
  m.Scope scope$,
  RawSynchronousSocket target$,
) =>
    target$.writeFromSync;
